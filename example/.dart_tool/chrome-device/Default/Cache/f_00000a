define(['dart_sdk', 'packages/flutter/src/services/system_channels.dart', 'packages/flutter/src/foundation/_platform_web.dart', 'packages/flutter/src/widgets/platform_view.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/foundation/basic_types.dart', 'packages/flutter/src/gestures/recognizer.dart', 'packages/flutter/src/painting/edge_insets.dart'], (function load__packages__mapbox_gl_platform_interface__mapbox_gl_platform_interface_dart(dart_sdk, packages__flutter__src__services__system_channels$46dart, packages__flutter__src__foundation___platform_web$46dart, packages__flutter__src__widgets__platform_view$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__foundation__basic_types$46dart, packages__flutter__src__gestures__recognizer$46dart, packages__flutter__src__painting__edge_insets$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const _js_helper = dart_sdk._js_helper;
  const ui = dart_sdk.ui;
  const _internal = dart_sdk._internal;
  const math = dart_sdk.math;
  const async = dart_sdk.async;
  const convert = dart_sdk.convert;
  const _native_typed_data = dart_sdk._native_typed_data;
  const typed_data = dart_sdk.typed_data;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const message_codec = packages__flutter__src__services__system_channels$46dart.src__services__message_codec;
  const platform_channel = packages__flutter__src__services__system_channels$46dart.src__services__platform_channel;
  const message_codecs = packages__flutter__src__services__system_channels$46dart.src__services__message_codecs;
  const platform = packages__flutter__src__foundation___platform_web$46dart.src__foundation__platform;
  const platform_view = packages__flutter__src__widgets__platform_view$46dart.src__widgets__platform_view;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const text = packages__flutter__src__widgets__widget_span$46dart.src__widgets__text;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const basic_types = packages__flutter__src__foundation__basic_types$46dart.src__foundation__basic_types;
  const recognizer = packages__flutter__src__gestures__recognizer$46dart.src__gestures__recognizer;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  var mapbox_gl_platform_interface = Object.create(dart.library);
  var $length = dartx.length;
  var $_get = dartx._get;
  var $add = dartx.add;
  var $remove = dartx.remove;
  var $isEmpty = dartx.isEmpty;
  var $isNotEmpty = dartx.isNotEmpty;
  var $runtimeType = dartx.runtimeType;
  var $_equals = dartx._equals;
  var $_set = dartx._set;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $modulo = dartx['%'];
  var $values = dartx.values;
  var $asMap = dartx.asMap;
  var $elementAt = dartx.elementAt;
  var $containsKey = dartx.containsKey;
  var $toString = dartx.toString;
  var $expand = dartx.expand;
  var $hashCode = dartx.hashCode;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    IdentityMapOfString$dynamic: () => (T.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    JSArrayOfdouble: () => (T.JSArrayOfdouble = dart.constFn(_interceptors.JSArray$(core.double)))(),
    StringAnddynamicTovoid: () => (T.StringAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [core.String, dart.dynamic])))(),
    LatLngTodynamic: () => (T.LatLngTodynamic = dart.constFn(dart.fnType(dart.dynamic, [mapbox_gl_platform_interface.LatLng])))(),
    StringN: () => (T.StringN = dart.constFn(dart.nullable(core.String)))(),
    PointOfdouble: () => (T.PointOfdouble = dart.constFn(math.Point$(core.double)))(),
    doubleN: () => (T.doubleN = dart.constFn(dart.nullable(core.double)))(),
    CameraPositionN: () => (T.CameraPositionN = dart.constFn(dart.nullable(mapbox_gl_platform_interface.CameraPosition)))(),
    boolN: () => (T.boolN = dart.constFn(dart.nullable(core.bool)))(),
    IdentityMapOfString$double: () => (T.IdentityMapOfString$double = dart.constFn(_js_helper.IdentityMap$(core.String, core.double)))(),
    FutureOrOfbool: () => (T.FutureOrOfbool = dart.constFn(async.FutureOr$(core.bool)))(),
    SymbolOptionsTodynamic: () => (T.SymbolOptionsTodynamic = dart.constFn(dart.fnType(dart.dynamic, [mapbox_gl_platform_interface.SymbolOptions])))(),
    MapEntryOfint$Symbol: () => (T.MapEntryOfint$Symbol = dart.constFn(core.MapEntry$(core.int, mapbox_gl_platform_interface.Symbol)))(),
    intAnddynamicToMapEntryOfint$Symbol: () => (T.intAnddynamicToMapEntryOfint$Symbol = dart.constFn(dart.fnType(T.MapEntryOfint$Symbol(), [core.int, dart.dynamic])))(),
    ListOfSymbol: () => (T.ListOfSymbol = dart.constFn(core.List$(mapbox_gl_platform_interface.Symbol)))(),
    LineOptionsTodynamic: () => (T.LineOptionsTodynamic = dart.constFn(dart.fnType(dart.dynamic, [mapbox_gl_platform_interface.LineOptions])))(),
    MapEntryOfint$Line: () => (T.MapEntryOfint$Line = dart.constFn(core.MapEntry$(core.int, mapbox_gl_platform_interface.Line)))(),
    intAnddynamicToMapEntryOfint$Line: () => (T.intAnddynamicToMapEntryOfint$Line = dart.constFn(dart.fnType(T.MapEntryOfint$Line(), [core.int, dart.dynamic])))(),
    ListOfLine: () => (T.ListOfLine = dart.constFn(core.List$(mapbox_gl_platform_interface.Line)))(),
    JSArrayOfLatLng: () => (T.JSArrayOfLatLng = dart.constFn(_interceptors.JSArray$(mapbox_gl_platform_interface.LatLng)))(),
    ListOfLatLng: () => (T.ListOfLatLng = dart.constFn(core.List$(mapbox_gl_platform_interface.LatLng)))(),
    CircleOptionsTodynamic: () => (T.CircleOptionsTodynamic = dart.constFn(dart.fnType(dart.dynamic, [mapbox_gl_platform_interface.CircleOptions])))(),
    MapEntryOfint$Circle: () => (T.MapEntryOfint$Circle = dart.constFn(core.MapEntry$(core.int, mapbox_gl_platform_interface.Circle)))(),
    intAnddynamicToMapEntryOfint$Circle: () => (T.intAnddynamicToMapEntryOfint$Circle = dart.constFn(dart.fnType(T.MapEntryOfint$Circle(), [core.int, dart.dynamic])))(),
    ListOfCircle: () => (T.ListOfCircle = dart.constFn(core.List$(mapbox_gl_platform_interface.Circle)))(),
    FillOptionsTodynamic: () => (T.FillOptionsTodynamic = dart.constFn(dart.fnType(dart.dynamic, [mapbox_gl_platform_interface.FillOptions])))(),
    MapEntryOfint$Fill: () => (T.MapEntryOfint$Fill = dart.constFn(core.MapEntry$(core.int, mapbox_gl_platform_interface.Fill)))(),
    intAnddynamicToMapEntryOfint$Fill: () => (T.intAnddynamicToMapEntryOfint$Fill = dart.constFn(dart.fnType(T.MapEntryOfint$Fill(), [core.int, dart.dynamic])))(),
    ListOfFill: () => (T.ListOfFill = dart.constFn(core.List$(mapbox_gl_platform_interface.Fill)))(),
    ObjectN: () => (T.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    IdentityMapOfString$ObjectN: () => (T.IdentityMapOfString$ObjectN = dart.constFn(_js_helper.IdentityMap$(core.String, T.ObjectN())))(),
    dynamicTodynamic: () => (T.dynamicTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.dynamic])))(),
    FutureOrOfList: () => (T.FutureOrOfList = dart.constFn(async.FutureOr$(core.List)))(),
    FutureOfList: () => (T.FutureOfList = dart.constFn(async.Future$(core.List)))(),
    MapOfObject$Object: () => (T.MapOfObject$Object = dart.constFn(core.Map$(core.Object, core.Object)))(),
    FutureOfLatLng: () => (T.FutureOfLatLng = dart.constFn(async.Future$(mapbox_gl_platform_interface.LatLng)))(),
    FutureOfLatLngBounds: () => (T.FutureOfLatLngBounds = dart.constFn(async.Future$(mapbox_gl_platform_interface.LatLngBounds)))(),
    IdentityMapOfString$Object: () => (T.IdentityMapOfString$Object = dart.constFn(_js_helper.IdentityMap$(core.String, core.Object)))(),
    FutureOfvoid: () => (T.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    PointOfnum: () => (T.PointOfnum = dart.constFn(math.Point$(core.num)))(),
    FutureOfPointOfnum: () => (T.FutureOfPointOfnum = dart.constFn(async.Future$(T.PointOfnum())))(),
    ListOfdouble: () => (T.ListOfdouble = dart.constFn(core.List$(core.double)))(),
    LatLngToListOfdouble: () => (T.LatLngToListOfdouble = dart.constFn(dart.fnType(T.ListOfdouble(), [mapbox_gl_platform_interface.LatLng])))(),
    ListOfdoubleToListOfdouble: () => (T.ListOfdoubleToListOfdouble = dart.constFn(dart.fnType(T.ListOfdouble(), [T.ListOfdouble()])))(),
    IdentityMapOfString$Float64List: () => (T.IdentityMapOfString$Float64List = dart.constFn(_js_helper.IdentityMap$(core.String, typed_data.Float64List)))(),
    JSArrayOfPointOfnum: () => (T.JSArrayOfPointOfnum = dart.constFn(_interceptors.JSArray$(T.PointOfnum())))(),
    ListOfPointOfnum: () => (T.ListOfPointOfnum = dart.constFn(core.List$(T.PointOfnum())))(),
    FutureOfListOfPointOfnum: () => (T.FutureOfListOfPointOfnum = dart.constFn(async.Future$(T.ListOfPointOfnum())))(),
    FutureOrOfdouble: () => (T.FutureOrOfdouble = dart.constFn(async.FutureOr$(core.double)))(),
    FutureOfdouble: () => (T.FutureOfdouble = dart.constFn(async.Future$(core.double)))(),
    ArgumentCallbacksOfString: () => (T.ArgumentCallbacksOfString = dart.constFn(mapbox_gl_platform_interface.ArgumentCallbacks$(core.String)))(),
    ArgumentCallbacksOfvoid: () => (T.ArgumentCallbacksOfvoid = dart.constFn(mapbox_gl_platform_interface.ArgumentCallbacks$(dart.void)))(),
    ArgumentCallbacksOfCameraPosition: () => (T.ArgumentCallbacksOfCameraPosition = dart.constFn(mapbox_gl_platform_interface.ArgumentCallbacks$(mapbox_gl_platform_interface.CameraPosition)))(),
    ArgumentCallbacksOfCameraPositionN: () => (T.ArgumentCallbacksOfCameraPositionN = dart.constFn(mapbox_gl_platform_interface.ArgumentCallbacks$(T.CameraPositionN())))(),
    MapOfString$dynamic: () => (T.MapOfString$dynamic = dart.constFn(core.Map$(core.String, dart.dynamic)))(),
    ArgumentCallbacksOfMapOfString$dynamic: () => (T.ArgumentCallbacksOfMapOfString$dynamic = dart.constFn(mapbox_gl_platform_interface.ArgumentCallbacks$(T.MapOfString$dynamic())))(),
    ArgumentCallbacksOfMyLocationTrackingMode: () => (T.ArgumentCallbacksOfMyLocationTrackingMode = dart.constFn(mapbox_gl_platform_interface.ArgumentCallbacks$(mapbox_gl_platform_interface.MyLocationTrackingMode)))(),
    ArgumentCallbacksOfUserLocation: () => (T.ArgumentCallbacksOfUserLocation = dart.constFn(mapbox_gl_platform_interface.ArgumentCallbacks$(mapbox_gl_platform_interface.UserLocation)))(),
    LatLngN: () => (T.LatLngN = dart.constFn(dart.nullable(mapbox_gl_platform_interface.LatLng)))(),
    VoidToMethodChannelMapboxGl: () => (T.VoidToMethodChannelMapboxGl = dart.constFn(dart.fnType(mapbox_gl_platform_interface.MethodChannelMapboxGl, [])))(),
    IdentityMapOfint$MapboxGlPlatform: () => (T.IdentityMapOfint$MapboxGlPlatform = dart.constFn(_js_helper.IdentityMap$(core.int, mapbox_gl_platform_interface.MapboxGlPlatform)))(),
    ListOfLatLngToList: () => (T.ListOfLatLngToList = dart.constFn(dart.fnType(core.List, [T.ListOfLatLng()])))(),
    JSArrayOfListOfLatLng: () => (T.JSArrayOfListOfLatLng = dart.constFn(_interceptors.JSArray$(T.ListOfLatLng())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: mapbox_gl_platform_interface.CircleOptions.prototype,
        [draggable$]: null,
        [geometry$]: null,
        [circleStrokeOpacity$]: null,
        [circleStrokeColor$]: null,
        [circleStrokeWidth$]: null,
        [circleOpacity$]: null,
        [circleBlur$]: null,
        [circleColor$]: null,
        [circleRadius$]: null
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: mapbox_gl_platform_interface.LineOptions.prototype,
        [draggable$0]: null,
        [geometry$0]: null,
        [linePattern$]: null,
        [lineBlur$]: null,
        [lineOffset$]: null,
        [lineGapWidth$]: null,
        [lineWidth$]: null,
        [lineColor$]: null,
        [lineOpacity$]: null,
        [lineJoin$]: null
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "viewType",
        [_Location_column]: 9,
        [_Location_line]: 131,
        [_Location_file]: null
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPlatformViewCreated",
        [_Location_column]: 9,
        [_Location_line]: 132,
        [_Location_file]: null
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "gestureRecognizers",
        [_Location_column]: 9,
        [_Location_line]: 133,
        [_Location_file]: null
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "creationParams",
        [_Location_column]: 9,
        [_Location_line]: 134,
        [_Location_file]: null
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "creationParamsCodec",
        [_Location_column]: 9,
        [_Location_line]: 135,
        [_Location_file]: null
      });
    },
    get C4() {
      return C[4] = dart.constList([C[5] || CT.C5, C[6] || CT.C6, C[7] || CT.C7, C[8] || CT.C8, C[9] || CT.C9], widget_inspector._Location);
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[4] || CT.C4,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 130,
        [_Location_file]: "file:///C:/Users/Lukas/Projekte/OnHaven/flutter-mapbox-gl/mapbox_gl_platform_interface/lib/src/method_channel_mapbox_gl.dart"
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "viewType",
        [_Location_column]: 9,
        [_Location_line]: 139,
        [_Location_file]: null
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPlatformViewCreated",
        [_Location_column]: 9,
        [_Location_line]: 140,
        [_Location_file]: null
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "gestureRecognizers",
        [_Location_column]: 9,
        [_Location_line]: 141,
        [_Location_file]: null
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "creationParams",
        [_Location_column]: 9,
        [_Location_line]: 142,
        [_Location_file]: null
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "creationParamsCodec",
        [_Location_column]: 9,
        [_Location_line]: 143,
        [_Location_file]: null
      });
    },
    get C11() {
      return C[11] = dart.constList([C[12] || CT.C12, C[13] || CT.C13, C[14] || CT.C14, C[15] || CT.C15, C[16] || CT.C16], widget_inspector._Location);
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[11] || CT.C11,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 138,
        [_Location_file]: "file:///C:/Users/Lukas/Projekte/OnHaven/flutter-mapbox-gl/mapbox_gl_platform_interface/lib/src/method_channel_mapbox_gl.dart"
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "data",
        [_Location_column]: 73,
        [_Location_line]: 147,
        [_Location_file]: null
      });
    },
    get C18() {
      return C[18] = dart.constList([C[19] || CT.C19], widget_inspector._Location);
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[18] || CT.C18,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 146,
        [_Location_file]: "file:///C:/Users/Lukas/Projekte/OnHaven/flutter-mapbox-gl/mapbox_gl_platform_interface/lib/src/method_channel_mapbox_gl.dart"
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: mapbox_gl_platform_interface.SymbolOptions.prototype,
        [draggable$1]: null,
        [zIndex$]: null,
        [geometry$1]: null,
        [textHaloBlur$]: null,
        [textHaloWidth$]: null,
        [textHaloColor$]: null,
        [textColor$]: null,
        [textOpacity$]: null,
        [iconHaloBlur$]: null,
        [iconHaloWidth$]: null,
        [iconHaloColor$]: null,
        [iconColor$]: null,
        [iconOpacity$]: null,
        [textOffset$]: null,
        [textTransform$]: null,
        [textRotate$]: null,
        [textAnchor$]: null,
        [textJustify$]: null,
        [textLetterSpacing$]: null,
        [textMaxWidth$]: null,
        [textSize$]: null,
        [textField$]: null,
        [fontNames$]: null,
        [iconAnchor$]: null,
        [iconOffset$]: null,
        [iconRotate$]: null,
        [iconImage$]: null,
        [iconSize$]: null
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: mapbox_gl_platform_interface.FillOptions.prototype,
        [draggable$2]: null,
        [geometry$2]: null,
        [fillPattern$]: null,
        [fillOutlineColor$]: null,
        [fillColor$]: null,
        [fillOpacity$]: null
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: mapbox_gl_platform_interface.MyLocationTrackingMode.prototype,
        [_name$]: "MyLocationTrackingMode.None",
        index: 0
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: mapbox_gl_platform_interface.MyLocationTrackingMode.prototype,
        [_name$]: "MyLocationTrackingMode.Tracking",
        index: 1
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: mapbox_gl_platform_interface.MyLocationTrackingMode.prototype,
        [_name$]: "MyLocationTrackingMode.TrackingCompass",
        index: 2
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: mapbox_gl_platform_interface.MyLocationTrackingMode.prototype,
        [_name$]: "MyLocationTrackingMode.TrackingGPS",
        index: 3
      });
    },
    get C26() {
      return C[26] = dart.constList([C[22] || CT.C22, C[23] || CT.C23, C[24] || CT.C24, C[25] || CT.C25], mapbox_gl_platform_interface.MyLocationTrackingMode);
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: mapbox_gl_platform_interface.MyLocationRenderMode.prototype,
        [_name$]: "MyLocationRenderMode.NORMAL",
        index: 0
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: mapbox_gl_platform_interface.MyLocationRenderMode.prototype,
        [_name$]: "MyLocationRenderMode.COMPASS",
        index: 1
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: mapbox_gl_platform_interface.MyLocationRenderMode.prototype,
        [_name$]: "MyLocationRenderMode.GPS",
        index: 2
      });
    },
    get C30() {
      return C[30] = dart.constList([C[27] || CT.C27, C[28] || CT.C28, C[29] || CT.C29], mapbox_gl_platform_interface.MyLocationRenderMode);
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: mapbox_gl_platform_interface.CompassViewPosition.prototype,
        [_name$]: "CompassViewPosition.TopLeft",
        index: 0
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: mapbox_gl_platform_interface.CompassViewPosition.prototype,
        [_name$]: "CompassViewPosition.TopRight",
        index: 1
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: mapbox_gl_platform_interface.CompassViewPosition.prototype,
        [_name$]: "CompassViewPosition.BottomLeft",
        index: 2
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: mapbox_gl_platform_interface.CompassViewPosition.prototype,
        [_name$]: "CompassViewPosition.BottomRight",
        index: 3
      });
    },
    get C35() {
      return C[35] = dart.constList([C[31] || CT.C31, C[32] || CT.C32, C[33] || CT.C33, C[34] || CT.C34], mapbox_gl_platform_interface.CompassViewPosition);
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: mapbox_gl_platform_interface.CameraTargetBounds.prototype,
        [bounds$]: null
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: mapbox_gl_platform_interface.MinMaxZoomPreference.prototype,
        [maxZoom$]: null,
        [minZoom$]: null
      });
    }
  }, false);
  var C = Array(38).fill(void 0);
  var I = [
    "package:mapbox_gl_platform_interface/mapbox_gl_platform_interface.dart",
    "file:///C:/Users/Lukas/Projekte/OnHaven/flutter-mapbox-gl/mapbox_gl_platform_interface/lib/src/location.dart",
    "file:///C:/Users/Lukas/Projekte/OnHaven/flutter-mapbox-gl/mapbox_gl_platform_interface/lib/src/ui.dart"
  ];
  var _callbacks = dart.privateName(mapbox_gl_platform_interface, "_callbacks");
  const _is_ArgumentCallbacks_default = Symbol('_is_ArgumentCallbacks_default');
  mapbox_gl_platform_interface.ArgumentCallbacks$ = dart.generic(T => {
    var TTovoid = () => (TTovoid = dart.constFn(dart.fnType(dart.void, [T])))();
    var JSArrayOfTTovoid = () => (JSArrayOfTTovoid = dart.constFn(_interceptors.JSArray$(TTovoid())))();
    var ListOfTTovoid = () => (ListOfTTovoid = dart.constFn(core.List$(TTovoid())))();
    class ArgumentCallbacks extends core.Object {
      call(argument) {
        T.as(argument);
        let length = this[_callbacks][$length];
        if (length === 1) {
          this[_callbacks][$_get](0)(argument);
        } else if (0 < length) {
          for (let callback of ListOfTTovoid().from(this[_callbacks])) {
            callback(argument);
          }
        }
      }
      add(callback) {
        this[_callbacks][$add](callback);
      }
      remove(callback) {
        this[_callbacks][$remove](callback);
      }
      get isEmpty() {
        return this[_callbacks][$isEmpty];
      }
      get isNotEmpty() {
        return this[_callbacks][$isNotEmpty];
      }
    }
    (ArgumentCallbacks.new = function() {
      this[_callbacks] = JSArrayOfTTovoid().of([]);
      ;
    }).prototype = ArgumentCallbacks.prototype;
    dart.addTypeTests(ArgumentCallbacks);
    ArgumentCallbacks.prototype[_is_ArgumentCallbacks_default] = true;
    dart.addTypeCaches(ArgumentCallbacks);
    dart.setMethodSignature(ArgumentCallbacks, () => ({
      __proto__: dart.getMethods(ArgumentCallbacks.__proto__),
      call: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      add: dart.fnType(dart.void, [dart.fnType(dart.void, [T])]),
      remove: dart.fnType(dart.void, [dart.fnType(dart.void, [T])])
    }));
    dart.setGetterSignature(ArgumentCallbacks, () => ({
      __proto__: dart.getGetters(ArgumentCallbacks.__proto__),
      isEmpty: core.bool,
      isNotEmpty: core.bool
    }));
    dart.setLibraryUri(ArgumentCallbacks, I[0]);
    dart.setFieldSignature(ArgumentCallbacks, () => ({
      __proto__: dart.getFields(ArgumentCallbacks.__proto__),
      [_callbacks]: dart.finalFieldType(core.List$(dart.fnType(dart.void, [T])))
    }));
    return ArgumentCallbacks;
  });
  mapbox_gl_platform_interface.ArgumentCallbacks = mapbox_gl_platform_interface.ArgumentCallbacks$();
  dart.addTypeTests(mapbox_gl_platform_interface.ArgumentCallbacks, _is_ArgumentCallbacks_default);
  var bearing$ = dart.privateName(mapbox_gl_platform_interface, "CameraPosition.bearing");
  var target$ = dart.privateName(mapbox_gl_platform_interface, "CameraPosition.target");
  var tilt$ = dart.privateName(mapbox_gl_platform_interface, "CameraPosition.tilt");
  var zoom$ = dart.privateName(mapbox_gl_platform_interface, "CameraPosition.zoom");
  mapbox_gl_platform_interface.CameraPosition = class CameraPosition extends core.Object {
    get bearing() {
      return this[bearing$];
    }
    set bearing(value) {
      super.bearing = value;
    }
    get target() {
      return this[target$];
    }
    set target(value) {
      super.target = value;
    }
    get tilt() {
      return this[tilt$];
    }
    set tilt(value) {
      super.tilt = value;
    }
    get zoom() {
      return this[zoom$];
    }
    set zoom(value) {
      super.zoom = value;
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["bearing", this.bearing, "target", this.target.toJson(), "tilt", this.tilt, "zoom", this.zoom]);
    }
    static fromMap(json) {
      if (json == null) {
        return null;
      }
      return new mapbox_gl_platform_interface.CameraPosition.new({bearing: core.double.as(dart.dsend(json, '_get', ["bearing"])), target: mapbox_gl_platform_interface.LatLng._fromJson(core.List.as(dart.dsend(json, '_get', ["target"]))), tilt: core.double.as(dart.dsend(json, '_get', ["tilt"])), zoom: core.double.as(dart.dsend(json, '_get', ["zoom"]))});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!this[$runtimeType]._equals(dart.runtimeType(other))) return false;
      let typedOther = mapbox_gl_platform_interface.CameraPosition.as(other);
      return this.bearing === typedOther.bearing && this.target._equals(typedOther.target) && this.tilt === typedOther.tilt && this.zoom === typedOther.zoom;
    }
    get hashCode() {
      return ui.hashValues(this.bearing, this.target, this.tilt, this.zoom);
    }
    toString() {
      return "CameraPosition(bearing: " + dart.str(this.bearing) + ", target: " + dart.str(this.target) + ", tilt: " + dart.str(this.tilt) + ", zoom: " + dart.str(this.zoom) + ")";
    }
  };
  (mapbox_gl_platform_interface.CameraPosition.new = function(opts) {
    let bearing = opts && 'bearing' in opts ? opts.bearing : 0;
    let target = opts && 'target' in opts ? opts.target : null;
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0;
    let zoom = opts && 'zoom' in opts ? opts.zoom : 0;
    this[bearing$] = bearing;
    this[target$] = target;
    this[tilt$] = tilt;
    this[zoom$] = zoom;
    ;
  }).prototype = mapbox_gl_platform_interface.CameraPosition.prototype;
  dart.addTypeTests(mapbox_gl_platform_interface.CameraPosition);
  dart.addTypeCaches(mapbox_gl_platform_interface.CameraPosition);
  dart.setMethodSignature(mapbox_gl_platform_interface.CameraPosition, () => ({
    __proto__: dart.getMethods(mapbox_gl_platform_interface.CameraPosition.__proto__),
    toMap: dart.fnType(dart.dynamic, []),
    _equals: dart.fnType(core.bool, [dart.dynamic]),
    [$_equals]: dart.fnType(core.bool, [dart.dynamic])
  }));
  dart.setLibraryUri(mapbox_gl_platform_interface.CameraPosition, I[0]);
  dart.setFieldSignature(mapbox_gl_platform_interface.CameraPosition, () => ({
    __proto__: dart.getFields(mapbox_gl_platform_interface.CameraPosition.__proto__),
    bearing: dart.finalFieldType(core.double),
    target: dart.finalFieldType(mapbox_gl_platform_interface.LatLng),
    tilt: dart.finalFieldType(core.double),
    zoom: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(mapbox_gl_platform_interface.CameraPosition, ['_equals', 'toString']);
  dart.defineExtensionAccessors(mapbox_gl_platform_interface.CameraPosition, ['hashCode']);
  var _json$ = dart.privateName(mapbox_gl_platform_interface, "_json");
  mapbox_gl_platform_interface.CameraUpdate = class CameraUpdate extends core.Object {
    static newCameraPosition(cameraPosition) {
      return new mapbox_gl_platform_interface.CameraUpdate.__(["newCameraPosition", cameraPosition.toMap()]);
    }
    static newLatLng(latLng) {
      return new mapbox_gl_platform_interface.CameraUpdate.__(["newLatLng", latLng.toJson()]);
    }
    static newLatLngBounds(bounds, opts) {
      let left = opts && 'left' in opts ? opts.left : 0;
      let top = opts && 'top' in opts ? opts.top : 0;
      let right = opts && 'right' in opts ? opts.right : 0;
      let bottom = opts && 'bottom' in opts ? opts.bottom : 0;
      return new mapbox_gl_platform_interface.CameraUpdate.__(["newLatLngBounds", bounds.toList(), left, top, right, bottom]);
    }
    static newLatLngZoom(latLng, zoom) {
      return new mapbox_gl_platform_interface.CameraUpdate.__(["newLatLngZoom", latLng.toJson(), zoom]);
    }
    static scrollBy(dx, dy) {
      return new mapbox_gl_platform_interface.CameraUpdate.__(["scrollBy", dx, dy]);
    }
    static zoomBy(amount, focus = null) {
      if (focus == null) {
        return new mapbox_gl_platform_interface.CameraUpdate.__(["zoomBy", amount]);
      } else {
        return new mapbox_gl_platform_interface.CameraUpdate.__(["zoomBy", amount, T.JSArrayOfdouble().of([focus.dx, focus.dy])]);
      }
    }
    static zoomIn() {
      return new mapbox_gl_platform_interface.CameraUpdate.__(["zoomIn"]);
    }
    static zoomOut() {
      return new mapbox_gl_platform_interface.CameraUpdate.__(["zoomOut"]);
    }
    static zoomTo(zoom) {
      return new mapbox_gl_platform_interface.CameraUpdate.__(["zoomTo", zoom]);
    }
    static bearingTo(bearing) {
      return new mapbox_gl_platform_interface.CameraUpdate.__(["bearingTo", bearing]);
    }
    static tiltTo(tilt) {
      return new mapbox_gl_platform_interface.CameraUpdate.__(["tiltTo", tilt]);
    }
    toJson() {
      return this[_json$];
    }
  };
  (mapbox_gl_platform_interface.CameraUpdate.__ = function(_json) {
    this[_json$] = _json;
    ;
  }).prototype = mapbox_gl_platform_interface.CameraUpdate.prototype;
  dart.addTypeTests(mapbox_gl_platform_interface.CameraUpdate);
  dart.addTypeCaches(mapbox_gl_platform_interface.CameraUpdate);
  dart.setMethodSignature(mapbox_gl_platform_interface.CameraUpdate, () => ({
    __proto__: dart.getMethods(mapbox_gl_platform_interface.CameraUpdate.__proto__),
    toJson: dart.fnType(dart.dynamic, [])
  }));
  dart.setLibraryUri(mapbox_gl_platform_interface.CameraUpdate, I[0]);
  dart.setFieldSignature(mapbox_gl_platform_interface.CameraUpdate, () => ({
    __proto__: dart.getFields(mapbox_gl_platform_interface.CameraUpdate.__proto__),
    [_json$]: dart.finalFieldType(dart.dynamic)
  }));
  var options$ = dart.privateName(mapbox_gl_platform_interface, "Circle.options");
  var _id$ = dart.privateName(mapbox_gl_platform_interface, "_id");
  var _data$ = dart.privateName(mapbox_gl_platform_interface, "_data");
  mapbox_gl_platform_interface.Circle = class Circle extends core.Object {
    get options() {
      return this[options$];
    }
    set options(value) {
      this[options$] = value;
    }
    get id() {
      return this[_id$];
    }
    get data() {
      return this[_data$];
    }
  };
  (mapbox_gl_platform_interface.Circle.new = function(_id, options, _data = null) {
    this[_id$] = _id;
    this[options$] = options;
    this[_data$] = _data;
    ;
  }).prototype = mapbox_gl_platform_interface.Circle.prototype;
  dart.addTypeTests(mapbox_gl_platform_interface.Circle);
  dart.addTypeCaches(mapbox_gl_platform_interface.Circle);
  dart.setGetterSignature(mapbox_gl_platform_interface.Circle, () => ({
    __proto__: dart.getGetters(mapbox_gl_platform_interface.Circle.__proto__),
    id: core.String,
    data: dart.nullable(core.Map)
  }));
  dart.setLibraryUri(mapbox_gl_platform_interface.Circle, I[0]);
  dart.setFieldSignature(mapbox_gl_platform_interface.Circle, () => ({
    __proto__: dart.getFields(mapbox_gl_platform_interface.Circle.__proto__),
    [_id$]: dart.finalFieldType(core.String),
    [_data$]: dart.finalFieldType(dart.nullable(core.Map)),
    options: dart.fieldType(mapbox_gl_platform_interface.CircleOptions)
  }));
  var circleRadius$ = dart.privateName(mapbox_gl_platform_interface, "CircleOptions.circleRadius");
  var circleColor$ = dart.privateName(mapbox_gl_platform_interface, "CircleOptions.circleColor");
  var circleBlur$ = dart.privateName(mapbox_gl_platform_interface, "CircleOptions.circleBlur");
  var circleOpacity$ = dart.privateName(mapbox_gl_platform_interface, "CircleOptions.circleOpacity");
  var circleStrokeWidth$ = dart.privateName(mapbox_gl_platform_interface, "CircleOptions.circleStrokeWidth");
  var circleStrokeColor$ = dart.privateName(mapbox_gl_platform_interface, "CircleOptions.circleStrokeColor");
  var circleStrokeOpacity$ = dart.privateName(mapbox_gl_platform_interface, "CircleOptions.circleStrokeOpacity");
  var geometry$ = dart.privateName(mapbox_gl_platform_interface, "CircleOptions.geometry");
  var draggable$ = dart.privateName(mapbox_gl_platform_interface, "CircleOptions.draggable");
  mapbox_gl_platform_interface.CircleOptions = class CircleOptions extends core.Object {
    get circleRadius() {
      return this[circleRadius$];
    }
    set circleRadius(value) {
      super.circleRadius = value;
    }
    get circleColor() {
      return this[circleColor$];
    }
    set circleColor(value) {
      super.circleColor = value;
    }
    get circleBlur() {
      return this[circleBlur$];
    }
    set circleBlur(value) {
      super.circleBlur = value;
    }
    get circleOpacity() {
      return this[circleOpacity$];
    }
    set circleOpacity(value) {
      super.circleOpacity = value;
    }
    get circleStrokeWidth() {
      return this[circleStrokeWidth$];
    }
    set circleStrokeWidth(value) {
      super.circleStrokeWidth = value;
    }
    get circleStrokeColor() {
      return this[circleStrokeColor$];
    }
    set circleStrokeColor(value) {
      super.circleStrokeColor = value;
    }
    get circleStrokeOpacity() {
      return this[circleStrokeOpacity$];
    }
    set circleStrokeOpacity(value) {
      super.circleStrokeOpacity = value;
    }
    get geometry() {
      return this[geometry$];
    }
    set geometry(value) {
      super.geometry = value;
    }
    get draggable() {
      return this[draggable$];
    }
    set draggable(value) {
      super.draggable = value;
    }
    copyWith(changes) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6;
      return new mapbox_gl_platform_interface.CircleOptions.new({circleRadius: (t0 = changes.circleRadius, t0 == null ? this.circleRadius : t0), circleColor: (t0$ = changes.circleColor, t0$ == null ? this.circleColor : t0$), circleBlur: (t0$0 = changes.circleBlur, t0$0 == null ? this.circleBlur : t0$0), circleOpacity: (t0$1 = changes.circleOpacity, t0$1 == null ? this.circleOpacity : t0$1), circleStrokeWidth: (t0$2 = changes.circleStrokeWidth, t0$2 == null ? this.circleStrokeWidth : t0$2), circleStrokeColor: (t0$3 = changes.circleStrokeColor, t0$3 == null ? this.circleStrokeColor : t0$3), circleStrokeOpacity: (t0$4 = changes.circleStrokeOpacity, t0$4 == null ? this.circleStrokeOpacity : t0$4), geometry: (t0$5 = changes.geometry, t0$5 == null ? this.geometry : t0$5), draggable: (t0$6 = changes.draggable, t0$6 == null ? this.draggable : t0$6)});
    }
    toJson() {
      let t0;
      let json = new (T.IdentityMapOfString$dynamic()).new();
      function addIfPresent(fieldName, value) {
        if (value != null) {
          json[$_set](fieldName, value);
        }
      }
      dart.fn(addIfPresent, T.StringAnddynamicTovoid());
      addIfPresent("circleRadius", this.circleRadius);
      addIfPresent("circleColor", this.circleColor);
      addIfPresent("circleBlur", this.circleBlur);
      addIfPresent("circleOpacity", this.circleOpacity);
      addIfPresent("circleStrokeWidth", this.circleStrokeWidth);
      addIfPresent("circleStrokeColor", this.circleStrokeColor);
      addIfPresent("circleStrokeOpacity", this.circleStrokeOpacity);
      addIfPresent("geometry", (t0 = this.geometry, t0 == null ? null : t0.toJson()));
      addIfPresent("draggable", this.draggable);
      return json;
    }
  };
  (mapbox_gl_platform_interface.CircleOptions.new = function(opts) {
    let circleRadius = opts && 'circleRadius' in opts ? opts.circleRadius : null;
    let circleColor = opts && 'circleColor' in opts ? opts.circleColor : null;
    let circleBlur = opts && 'circleBlur' in opts ? opts.circleBlur : null;
    let circleOpacity = opts && 'circleOpacity' in opts ? opts.circleOpacity : null;
    let circleStrokeWidth = opts && 'circleStrokeWidth' in opts ? opts.circleStrokeWidth : null;
    let circleStrokeColor = opts && 'circleStrokeColor' in opts ? opts.circleStrokeColor : null;
    let circleStrokeOpacity = opts && 'circleStrokeOpacity' in opts ? opts.circleStrokeOpacity : null;
    let geometry = opts && 'geometry' in opts ? opts.geometry : null;
    let draggable = opts && 'draggable' in opts ? opts.draggable : null;
    this[circleRadius$] = circleRadius;
    this[circleColor$] = circleColor;
    this[circleBlur$] = circleBlur;
    this[circleOpacity$] = circleOpacity;
    this[circleStrokeWidth$] = circleStrokeWidth;
    this[circleStrokeColor$] = circleStrokeColor;
    this[circleStrokeOpacity$] = circleStrokeOpacity;
    this[geometry$] = geometry;
    this[draggable$] = draggable;
    ;
  }).prototype = mapbox_gl_platform_interface.CircleOptions.prototype;
  dart.addTypeTests(mapbox_gl_platform_interface.CircleOptions);
  dart.addTypeCaches(mapbox_gl_platform_interface.CircleOptions);
  dart.setMethodSignature(mapbox_gl_platform_interface.CircleOptions, () => ({
    __proto__: dart.getMethods(mapbox_gl_platform_interface.CircleOptions.__proto__),
    copyWith: dart.fnType(mapbox_gl_platform_interface.CircleOptions, [mapbox_gl_platform_interface.CircleOptions]),
    toJson: dart.fnType(dart.dynamic, [])
  }));
  dart.setLibraryUri(mapbox_gl_platform_interface.CircleOptions, I[0]);
  dart.setFieldSignature(mapbox_gl_platform_interface.CircleOptions, () => ({
    __proto__: dart.getFields(mapbox_gl_platform_interface.CircleOptions.__proto__),
    circleRadius: dart.finalFieldType(dart.nullable(core.double)),
    circleColor: dart.finalFieldType(dart.nullable(core.String)),
    circleBlur: dart.finalFieldType(dart.nullable(core.double)),
    circleOpacity: dart.finalFieldType(dart.nullable(core.double)),
    circleStrokeWidth: dart.finalFieldType(dart.nullable(core.double)),
    circleStrokeColor: dart.finalFieldType(dart.nullable(core.String)),
    circleStrokeOpacity: dart.finalFieldType(dart.nullable(core.double)),
    geometry: dart.finalFieldType(dart.nullable(mapbox_gl_platform_interface.LatLng)),
    draggable: dart.finalFieldType(dart.nullable(core.bool))
  }));
  dart.defineLazy(mapbox_gl_platform_interface.CircleOptions, {
    /*mapbox_gl_platform_interface.CircleOptions.defaultOptions*/get defaultOptions() {
      return C[0] || CT.C0;
    }
  }, false);
  var options$0 = dart.privateName(mapbox_gl_platform_interface, "Line.options");
  mapbox_gl_platform_interface.Line = class Line extends core.Object {
    get options() {
      return this[options$0];
    }
    set options(value) {
      this[options$0] = value;
    }
    get id() {
      return this[_id$];
    }
    get data() {
      return this[_data$];
    }
  };
  (mapbox_gl_platform_interface.Line.new = function(_id, options, _data = null) {
    this[_id$] = _id;
    this[options$0] = options;
    this[_data$] = _data;
    ;
  }).prototype = mapbox_gl_platform_interface.Line.prototype;
  dart.addTypeTests(mapbox_gl_platform_interface.Line);
  dart.addTypeCaches(mapbox_gl_platform_interface.Line);
  dart.setGetterSignature(mapbox_gl_platform_interface.Line, () => ({
    __proto__: dart.getGetters(mapbox_gl_platform_interface.Line.__proto__),
    id: core.String,
    data: dart.nullable(core.Map)
  }));
  dart.setLibraryUri(mapbox_gl_platform_interface.Line, I[0]);
  dart.setFieldSignature(mapbox_gl_platform_interface.Line, () => ({
    __proto__: dart.getFields(mapbox_gl_platform_interface.Line.__proto__),
    [_id$]: dart.finalFieldType(core.String),
    [_data$]: dart.finalFieldType(dart.nullable(core.Map)),
    options: dart.fieldType(mapbox_gl_platform_interface.LineOptions)
  }));
  var lineJoin$ = dart.privateName(mapbox_gl_platform_interface, "LineOptions.lineJoin");
  var lineOpacity$ = dart.privateName(mapbox_gl_platform_interface, "LineOptions.lineOpacity");
  var lineColor$ = dart.privateName(mapbox_gl_platform_interface, "LineOptions.lineColor");
  var lineWidth$ = dart.privateName(mapbox_gl_platform_interface, "LineOptions.lineWidth");
  var lineGapWidth$ = dart.privateName(mapbox_gl_platform_interface, "LineOptions.lineGapWidth");
  var lineOffset$ = dart.privateName(mapbox_gl_platform_interface, "LineOptions.lineOffset");
  var lineBlur$ = dart.privateName(mapbox_gl_platform_interface, "LineOptions.lineBlur");
  var linePattern$ = dart.privateName(mapbox_gl_platform_interface, "LineOptions.linePattern");
  var geometry$0 = dart.privateName(mapbox_gl_platform_interface, "LineOptions.geometry");
  var draggable$0 = dart.privateName(mapbox_gl_platform_interface, "LineOptions.draggable");
  mapbox_gl_platform_interface.LineOptions = class LineOptions extends core.Object {
    get lineJoin() {
      return this[lineJoin$];
    }
    set lineJoin(value) {
      super.lineJoin = value;
    }
    get lineOpacity() {
      return this[lineOpacity$];
    }
    set lineOpacity(value) {
      super.lineOpacity = value;
    }
    get lineColor() {
      return this[lineColor$];
    }
    set lineColor(value) {
      super.lineColor = value;
    }
    get lineWidth() {
      return this[lineWidth$];
    }
    set lineWidth(value) {
      super.lineWidth = value;
    }
    get lineGapWidth() {
      return this[lineGapWidth$];
    }
    set lineGapWidth(value) {
      super.lineGapWidth = value;
    }
    get lineOffset() {
      return this[lineOffset$];
    }
    set lineOffset(value) {
      super.lineOffset = value;
    }
    get lineBlur() {
      return this[lineBlur$];
    }
    set lineBlur(value) {
      super.lineBlur = value;
    }
    get linePattern() {
      return this[linePattern$];
    }
    set linePattern(value) {
      super.linePattern = value;
    }
    get geometry() {
      return this[geometry$0];
    }
    set geometry(value) {
      super.geometry = value;
    }
    get draggable() {
      return this[draggable$0];
    }
    set draggable(value) {
      super.draggable = value;
    }
    copyWith(changes) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7;
      return new mapbox_gl_platform_interface.LineOptions.new({lineJoin: (t0 = changes.lineJoin, t0 == null ? this.lineJoin : t0), lineOpacity: (t0$ = changes.lineOpacity, t0$ == null ? this.lineOpacity : t0$), lineColor: (t0$0 = changes.lineColor, t0$0 == null ? this.lineColor : t0$0), lineWidth: (t0$1 = changes.lineWidth, t0$1 == null ? this.lineWidth : t0$1), lineGapWidth: (t0$2 = changes.lineGapWidth, t0$2 == null ? this.lineGapWidth : t0$2), lineOffset: (t0$3 = changes.lineOffset, t0$3 == null ? this.lineOffset : t0$3), lineBlur: (t0$4 = changes.lineBlur, t0$4 == null ? this.lineBlur : t0$4), linePattern: (t0$5 = changes.linePattern, t0$5 == null ? this.linePattern : t0$5), geometry: (t0$6 = changes.geometry, t0$6 == null ? this.geometry : t0$6), draggable: (t0$7 = changes.draggable, t0$7 == null ? this.draggable : t0$7)});
    }
    toJson() {
      let t0;
      let json = new (T.IdentityMapOfString$dynamic()).new();
      function addIfPresent(fieldName, value) {
        if (value != null) {
          json[$_set](fieldName, value);
        }
      }
      dart.fn(addIfPresent, T.StringAnddynamicTovoid());
      addIfPresent("lineJoin", this.lineJoin);
      addIfPresent("lineOpacity", this.lineOpacity);
      addIfPresent("lineColor", this.lineColor);
      addIfPresent("lineWidth", this.lineWidth);
      addIfPresent("lineGapWidth", this.lineGapWidth);
      addIfPresent("lineOffset", this.lineOffset);
      addIfPresent("lineBlur", this.lineBlur);
      addIfPresent("linePattern", this.linePattern);
      addIfPresent("geometry", (t0 = this.geometry, t0 == null ? null : t0[$map](dart.dynamic, dart.fn(latLng => latLng.toJson(), T.LatLngTodynamic()))[$toList]()));
      addIfPresent("draggable", this.draggable);
      return json;
    }
  };
  (mapbox_gl_platform_interface.LineOptions.new = function(opts) {
    let lineJoin = opts && 'lineJoin' in opts ? opts.lineJoin : null;
    let lineOpacity = opts && 'lineOpacity' in opts ? opts.lineOpacity : null;
    let lineColor = opts && 'lineColor' in opts ? opts.lineColor : null;
    let lineWidth = opts && 'lineWidth' in opts ? opts.lineWidth : null;
    let lineGapWidth = opts && 'lineGapWidth' in opts ? opts.lineGapWidth : null;
    let lineOffset = opts && 'lineOffset' in opts ? opts.lineOffset : null;
    let lineBlur = opts && 'lineBlur' in opts ? opts.lineBlur : null;
    let linePattern = opts && 'linePattern' in opts ? opts.linePattern : null;
    let geometry = opts && 'geometry' in opts ? opts.geometry : null;
    let draggable = opts && 'draggable' in opts ? opts.draggable : null;
    this[lineJoin$] = lineJoin;
    this[lineOpacity$] = lineOpacity;
    this[lineColor$] = lineColor;
    this[lineWidth$] = lineWidth;
    this[lineGapWidth$] = lineGapWidth;
    this[lineOffset$] = lineOffset;
    this[lineBlur$] = lineBlur;
    this[linePattern$] = linePattern;
    this[geometry$0] = geometry;
    this[draggable$0] = draggable;
    ;
  }).prototype = mapbox_gl_platform_interface.LineOptions.prototype;
  dart.addTypeTests(mapbox_gl_platform_interface.LineOptions);
  dart.addTypeCaches(mapbox_gl_platform_interface.LineOptions);
  dart.setMethodSignature(mapbox_gl_platform_interface.LineOptions, () => ({
    __proto__: dart.getMethods(mapbox_gl_platform_interface.LineOptions.__proto__),
    copyWith: dart.fnType(mapbox_gl_platform_interface.LineOptions, [mapbox_gl_platform_interface.LineOptions]),
    toJson: dart.fnType(dart.dynamic, [])
  }));
  dart.setLibraryUri(mapbox_gl_platform_interface.LineOptions, I[0]);
  dart.setFieldSignature(mapbox_gl_platform_interface.LineOptions, () => ({
    __proto__: dart.getFields(mapbox_gl_platform_interface.LineOptions.__proto__),
    lineJoin: dart.finalFieldType(dart.nullable(core.String)),
    lineOpacity: dart.finalFieldType(dart.nullable(core.double)),
    lineColor: dart.finalFieldType(dart.nullable(core.String)),
    lineWidth: dart.finalFieldType(dart.nullable(core.double)),
    lineGapWidth: dart.finalFieldType(dart.nullable(core.double)),
    lineOffset: dart.finalFieldType(dart.nullable(core.double)),
    lineBlur: dart.finalFieldType(dart.nullable(core.double)),
    linePattern: dart.finalFieldType(dart.nullable(core.String)),
    geometry: dart.finalFieldType(dart.nullable(core.List$(mapbox_gl_platform_interface.LatLng))),
    draggable: dart.finalFieldType(dart.nullable(core.bool))
  }));
  dart.defineLazy(mapbox_gl_platform_interface.LineOptions, {
    /*mapbox_gl_platform_interface.LineOptions.defaultOptions*/get defaultOptions() {
      return C[1] || CT.C1;
    }
  }, false);
  var latitude$ = dart.privateName(mapbox_gl_platform_interface, "LatLng.latitude");
  var longitude$ = dart.privateName(mapbox_gl_platform_interface, "LatLng.longitude");
  mapbox_gl_platform_interface.LatLng = class LatLng extends core.Object {
    get latitude() {
      return this[latitude$];
    }
    set latitude(value) {
      super.latitude = value;
    }
    get longitude() {
      return this[longitude$];
    }
    set longitude(value) {
      super.longitude = value;
    }
    ['+'](o) {
      return new mapbox_gl_platform_interface.LatLng.new(this.latitude + o.latitude, this.longitude + o.longitude);
    }
    ['-'](o) {
      return new mapbox_gl_platform_interface.LatLng.new(this.latitude - o.latitude, this.longitude - o.longitude);
    }
    toJson() {
      return T.JSArrayOfdouble().of([this.latitude, this.longitude]);
    }
    static _fromJson(json) {
      return new mapbox_gl_platform_interface.LatLng.new(core.double.as(json[$_get](0)), core.double.as(json[$_get](1)));
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + dart.str(this.latitude) + ", " + dart.str(this.longitude) + ")";
    }
    _equals(o) {
      if (o == null) return false;
      return mapbox_gl_platform_interface.LatLng.is(o) && o.latitude === this.latitude && o.longitude === this.longitude;
    }
    get hashCode() {
      return ui.hashValues(this.latitude, this.longitude);
    }
  };
  (mapbox_gl_platform_interface.LatLng.new = function(latitude, longitude) {
    this[latitude$] = latitude < -90.0 ? -90.0 : 90.0 < latitude ? 90.0 : latitude;
    this[longitude$] = (longitude + 180.0)[$modulo](360.0) - 180.0;
    ;
  }).prototype = mapbox_gl_platform_interface.LatLng.prototype;
  dart.addTypeTests(mapbox_gl_platform_interface.LatLng);
  dart.addTypeCaches(mapbox_gl_platform_interface.LatLng);
  dart.setMethodSignature(mapbox_gl_platform_interface.LatLng, () => ({
    __proto__: dart.getMethods(mapbox_gl_platform_interface.LatLng.__proto__),
    '+': dart.fnType(mapbox_gl_platform_interface.LatLng, [mapbox_gl_platform_interface.LatLng]),
    '-': dart.fnType(mapbox_gl_platform_interface.LatLng, [mapbox_gl_platform_interface.LatLng]),
    toJson: dart.fnType(dart.dynamic, [])
  }));
  dart.setLibraryUri(mapbox_gl_platform_interface.LatLng, I[0]);
  dart.setFieldSignature(mapbox_gl_platform_interface.LatLng, () => ({
    __proto__: dart.getFields(mapbox_gl_platform_interface.LatLng.__proto__),
    latitude: dart.finalFieldType(core.double),
    longitude: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(mapbox_gl_platform_interface.LatLng, ['toString', '_equals']);
  dart.defineExtensionAccessors(mapbox_gl_platform_interface.LatLng, ['hashCode']);
  var southwest$ = dart.privateName(mapbox_gl_platform_interface, "LatLngBounds.southwest");
  var northeast$ = dart.privateName(mapbox_gl_platform_interface, "LatLngBounds.northeast");
  mapbox_gl_platform_interface.LatLngBounds = class LatLngBounds extends core.Object {
    get southwest() {
      return this[southwest$];
    }
    set southwest(value) {
      super.southwest = value;
    }
    get northeast() {
      return this[northeast$];
    }
    set northeast(value) {
      super.northeast = value;
    }
    toList() {
      return [this.southwest.toJson(), this.northeast.toJson()];
    }
    static fromList(json) {
      if (json == null) {
        return null;
      }
      return new mapbox_gl_platform_interface.LatLngBounds.new({southwest: mapbox_gl_platform_interface.LatLng._fromJson(core.List.as(dart.dsend(json, '_get', [0]))), northeast: mapbox_gl_platform_interface.LatLng._fromJson(core.List.as(dart.dsend(json, '_get', [1])))});
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + dart.str(this.southwest) + ", " + dart.str(this.northeast) + ")";
    }
    _equals(o) {
      if (o == null) return false;
      return mapbox_gl_platform_interface.LatLngBounds.is(o) && o.southwest._equals(this.southwest) && o.northeast._equals(this.northeast);
    }
    get hashCode() {
      return ui.hashValues(this.southwest, this.northeast);
    }
  };
  (mapbox_gl_platform_interface.LatLngBounds.new = function(opts) {
    let southwest = opts && 'southwest' in opts ? opts.southwest : null;
    let northeast = opts && 'northeast' in opts ? opts.northeast : null;
    this[southwest$] = southwest;
    this[northeast$] = northeast;
    if (!(southwest.latitude <= northeast.latitude)) dart.assertFailed(null, I[1], 69, 16, "southwest.latitude <= northeast.latitude");
    ;
  }).prototype = mapbox_gl_platform_interface.LatLngBounds.prototype;
  dart.addTypeTests(mapbox_gl_platform_interface.LatLngBounds);
  dart.addTypeCaches(mapbox_gl_platform_interface.LatLngBounds);
  dart.setMethodSignature(mapbox_gl_platform_interface.LatLngBounds, () => ({
    __proto__: dart.getMethods(mapbox_gl_platform_interface.LatLngBounds.__proto__),
    toList: dart.fnType(dart.dynamic, [])
  }));
  dart.setLibraryUri(mapbox_gl_platform_interface.LatLngBounds, I[0]);
  dart.setFieldSignature(mapbox_gl_platform_interface.LatLngBounds, () => ({
    __proto__: dart.getFields(mapbox_gl_platform_interface.LatLngBounds.__proto__),
    southwest: dart.finalFieldType(mapbox_gl_platform_interface.LatLng),
    northeast: dart.finalFieldType(mapbox_gl_platform_interface.LatLng)
  }));
  dart.defineExtensionMethods(mapbox_gl_platform_interface.LatLngBounds, ['toString', '_equals']);
  dart.defineExtensionAccessors(mapbox_gl_platform_interface.LatLngBounds, ['hashCode']);
  var topLeft$ = dart.privateName(mapbox_gl_platform_interface, "LatLngQuad.topLeft");
  var topRight$ = dart.privateName(mapbox_gl_platform_interface, "LatLngQuad.topRight");
  var bottomRight$ = dart.privateName(mapbox_gl_platform_interface, "LatLngQuad.bottomRight");
  var bottomLeft$ = dart.privateName(mapbox_gl_platform_interface, "LatLngQuad.bottomLeft");
  mapbox_gl_platform_interface.LatLngQuad = class LatLngQuad extends core.Object {
    get topLeft() {
      return this[topLeft$];
    }
    set topLeft(value) {
      super.topLeft = value;
    }
    get topRight() {
      return this[topRight$];
    }
    set topRight(value) {
      super.topRight = value;
    }
    get bottomRight() {
      return this[bottomRight$];
    }
    set bottomRight(value) {
      super.bottomRight = value;
    }
    get bottomLeft() {
      return this[bottomLeft$];
    }
    set bottomLeft(value) {
      super.bottomLeft = value;
    }
    toList() {
      return [this.topLeft.toJson(), this.topRight.toJson(), this.bottomRight.toJson(), this.bottomLeft.toJson()];
    }
    static fromList(json) {
      if (json == null) {
        return null;
      }
      return new mapbox_gl_platform_interface.LatLngQuad.new({topLeft: mapbox_gl_platform_interface.LatLng._fromJson(core.List.as(dart.dsend(json, '_get', [0]))), topRight: mapbox_gl_platform_interface.LatLng._fromJson(core.List.as(dart.dsend(json, '_get', [1]))), bottomRight: mapbox_gl_platform_interface.LatLng._fromJson(core.List.as(dart.dsend(json, '_get', [2]))), bottomLeft: mapbox_gl_platform_interface.LatLng._fromJson(core.List.as(dart.dsend(json, '_get', [3])))});
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + dart.str(this.topLeft) + ", " + dart.str(this.topRight) + ", " + dart.str(this.bottomRight) + ", " + dart.str(this.bottomLeft) + ")";
    }
    _equals(o) {
      if (o == null) return false;
      return mapbox_gl_platform_interface.LatLngQuad.is(o) && o.topLeft._equals(this.topLeft) && o.topRight._equals(this.topRight) && o.bottomRight._equals(this.bottomRight) && o.bottomLeft._equals(this.bottomLeft);
    }
    get hashCode() {
      return ui.hashValues(this.topLeft, this.topRight, this.bottomRight, this.bottomLeft);
    }
  };
  (mapbox_gl_platform_interface.LatLngQuad.new = function(opts) {
    let topLeft = opts && 'topLeft' in opts ? opts.topLeft : null;
    let topRight = opts && 'topRight' in opts ? opts.topRight : null;
    let bottomRight = opts && 'bottomRight' in opts ? opts.bottomRight : null;
    let bottomLeft = opts && 'bottomLeft' in opts ? opts.bottomLeft : null;
    this[topLeft$] = topLeft;
    this[topRight$] = topRight;
    this[bottomRight$] = bottomRight;
    this[bottomLeft$] = bottomLeft;
    ;
  }).prototype = mapbox_gl_platform_interface.LatLngQuad.prototype;
  dart.addTypeTests(mapbox_gl_platform_interface.LatLngQuad);
  dart.addTypeCaches(mapbox_gl_platform_interface.LatLngQuad);
  dart.setMethodSignature(mapbox_gl_platform_interface.LatLngQuad, () => ({
    __proto__: dart.getMethods(mapbox_gl_platform_interface.LatLngQuad.__proto__),
    toList: dart.fnType(dart.dynamic, [])
  }));
  dart.setLibraryUri(mapbox_gl_platform_interface.LatLngQuad, I[0]);
  dart.setFieldSignature(mapbox_gl_platform_interface.LatLngQuad, () => ({
    __proto__: dart.getFields(mapbox_gl_platform_interface.LatLngQuad.__proto__),
    topLeft: dart.finalFieldType(mapbox_gl_platform_interface.LatLng),
    topRight: dart.finalFieldType(mapbox_gl_platform_interface.LatLng),
    bottomRight: dart.finalFieldType(mapbox_gl_platform_interface.LatLng),
    bottomLeft: dart.finalFieldType(mapbox_gl_platform_interface.LatLng)
  }));
  dart.defineExtensionMethods(mapbox_gl_platform_interface.LatLngQuad, ['toString', '_equals']);
  dart.defineExtensionAccessors(mapbox_gl_platform_interface.LatLngQuad, ['hashCode']);
  var position$ = dart.privateName(mapbox_gl_platform_interface, "UserLocation.position");
  var altitude$ = dart.privateName(mapbox_gl_platform_interface, "UserLocation.altitude");
  var bearing$0 = dart.privateName(mapbox_gl_platform_interface, "UserLocation.bearing");
  var speed$ = dart.privateName(mapbox_gl_platform_interface, "UserLocation.speed");
  var horizontalAccuracy$ = dart.privateName(mapbox_gl_platform_interface, "UserLocation.horizontalAccuracy");
  var verticalAccuracy$ = dart.privateName(mapbox_gl_platform_interface, "UserLocation.verticalAccuracy");
  var timestamp$ = dart.privateName(mapbox_gl_platform_interface, "UserLocation.timestamp");
  var heading$ = dart.privateName(mapbox_gl_platform_interface, "UserLocation.heading");
  mapbox_gl_platform_interface.UserLocation = class UserLocation extends core.Object {
    get position() {
      return this[position$];
    }
    set position(value) {
      super.position = value;
    }
    get altitude() {
      return this[altitude$];
    }
    set altitude(value) {
      super.altitude = value;
    }
    get bearing() {
      return this[bearing$0];
    }
    set bearing(value) {
      super.bearing = value;
    }
    get speed() {
      return this[speed$];
    }
    set speed(value) {
      super.speed = value;
    }
    get horizontalAccuracy() {
      return this[horizontalAccuracy$];
    }
    set horizontalAccuracy(value) {
      super.horizontalAccuracy = value;
    }
    get verticalAccuracy() {
      return this[verticalAccuracy$];
    }
    set verticalAccuracy(value) {
      super.verticalAccuracy = value;
    }
    get timestamp() {
      return this[timestamp$];
    }
    set timestamp(value) {
      super.timestamp = value;
    }
    get heading() {
      return this[heading$];
    }
    set heading(value) {
      super.heading = value;
    }
  };
  (mapbox_gl_platform_interface.UserLocation.new = function(opts) {
    let position = opts && 'position' in opts ? opts.position : null;
    let altitude = opts && 'altitude' in opts ? opts.altitude : null;
    let bearing = opts && 'bearing' in opts ? opts.bearing : null;
    let speed = opts && 'speed' in opts ? opts.speed : null;
    let horizontalAccuracy = opts && 'horizontalAccuracy' in opts ? opts.horizontalAccuracy : null;
    let verticalAccuracy = opts && 'verticalAccuracy' in opts ? opts.verticalAccuracy : null;
    let timestamp = opts && 'timestamp' in opts ? opts.timestamp : null;
    let heading = opts && 'heading' in opts ? opts.heading : null;
    this[position$] = position;
    this[altitude$] = altitude;
    this[bearing$0] = bearing;
    this[speed$] = speed;
    this[horizontalAccuracy$] = horizontalAccuracy;
    this[verticalAccuracy$] = verticalAccuracy;
    this[timestamp$] = timestamp;
    this[heading$] = heading;
    ;
  }).prototype = mapbox_gl_platform_interface.UserLocation.prototype;
  dart.addTypeTests(mapbox_gl_platform_interface.UserLocation);
  dart.addTypeCaches(mapbox_gl_platform_interface.UserLocation);
  dart.setLibraryUri(mapbox_gl_platform_interface.UserLocation, I[0]);
  dart.setFieldSignature(mapbox_gl_platform_interface.UserLocation, () => ({
    __proto__: dart.getFields(mapbox_gl_platform_interface.UserLocation.__proto__),
    position: dart.finalFieldType(mapbox_gl_platform_interface.LatLng),
    altitude: dart.finalFieldType(dart.nullable(core.double)),
    bearing: dart.finalFieldType(dart.nullable(core.double)),
    speed: dart.finalFieldType(dart.nullable(core.double)),
    horizontalAccuracy: dart.finalFieldType(dart.nullable(core.double)),
    verticalAccuracy: dart.finalFieldType(dart.nullable(core.double)),
    timestamp: dart.finalFieldType(core.DateTime),
    heading: dart.finalFieldType(dart.nullable(mapbox_gl_platform_interface.UserHeading))
  }));
  var magneticHeading$ = dart.privateName(mapbox_gl_platform_interface, "UserHeading.magneticHeading");
  var trueHeading$ = dart.privateName(mapbox_gl_platform_interface, "UserHeading.trueHeading");
  var headingAccuracy$ = dart.privateName(mapbox_gl_platform_interface, "UserHeading.headingAccuracy");
  var x$ = dart.privateName(mapbox_gl_platform_interface, "UserHeading.x");
  var y$ = dart.privateName(mapbox_gl_platform_interface, "UserHeading.y");
  var z$ = dart.privateName(mapbox_gl_platform_interface, "UserHeading.z");
  var timestamp$0 = dart.privateName(mapbox_gl_platform_interface, "UserHeading.timestamp");
  mapbox_gl_platform_interface.UserHeading = class UserHeading extends core.Object {
    get magneticHeading() {
      return this[magneticHeading$];
    }
    set magneticHeading(value) {
      super.magneticHeading = value;
    }
    get trueHeading() {
      return this[trueHeading$];
    }
    set trueHeading(value) {
      super.trueHeading = value;
    }
    get headingAccuracy() {
      return this[headingAccuracy$];
    }
    set headingAccuracy(value) {
      super.headingAccuracy = value;
    }
    get x() {
      return this[x$];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$];
    }
    set y(value) {
      super.y = value;
    }
    get z() {
      return this[z$];
    }
    set z(value) {
      super.z = value;
    }
    get timestamp() {
      return this[timestamp$0];
    }
    set timestamp(value) {
      super.timestamp = value;
    }
  };
  (mapbox_gl_platform_interface.UserHeading.new = function(opts) {
    let magneticHeading = opts && 'magneticHeading' in opts ? opts.magneticHeading : null;
    let trueHeading = opts && 'trueHeading' in opts ? opts.trueHeading : null;
    let headingAccuracy = opts && 'headingAccuracy' in opts ? opts.headingAccuracy : null;
    let x = opts && 'x' in opts ? opts.x : null;
    let y = opts && 'y' in opts ? opts.y : null;
    let z = opts && 'z' in opts ? opts.z : null;
    let timestamp = opts && 'timestamp' in opts ? opts.timestamp : null;
    this[magneticHeading$] = magneticHeading;
    this[trueHeading$] = trueHeading;
    this[headingAccuracy$] = headingAccuracy;
    this[x$] = x;
    this[y$] = y;
    this[z$] = z;
    this[timestamp$0] = timestamp;
    ;
  }).prototype = mapbox_gl_platform_interface.UserHeading.prototype;
  dart.addTypeTests(mapbox_gl_platform_interface.UserHeading);
  dart.addTypeCaches(mapbox_gl_platform_interface.UserHeading);
  dart.setLibraryUri(mapbox_gl_platform_interface.UserHeading, I[0]);
  dart.setFieldSignature(mapbox_gl_platform_interface.UserHeading, () => ({
    __proto__: dart.getFields(mapbox_gl_platform_interface.UserHeading.__proto__),
    magneticHeading: dart.finalFieldType(dart.nullable(core.double)),
    trueHeading: dart.finalFieldType(dart.nullable(core.double)),
    headingAccuracy: dart.finalFieldType(dart.nullable(core.double)),
    x: dart.finalFieldType(dart.nullable(core.double)),
    y: dart.finalFieldType(dart.nullable(core.double)),
    z: dart.finalFieldType(dart.nullable(core.double)),
    timestamp: dart.finalFieldType(core.DateTime)
  }));
  var __MethodChannelMapboxGl__channel = dart.privateName(mapbox_gl_platform_interface, "_#MethodChannelMapboxGl#_channel");
  var _channel = dart.privateName(mapbox_gl_platform_interface, "_channel");
  var _handleMethodCall = dart.privateName(mapbox_gl_platform_interface, "_handleMethodCall");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  var onInfoWindowTappedPlatform = dart.privateName(mapbox_gl_platform_interface, "MapboxGlPlatform.onInfoWindowTappedPlatform");
  var onSymbolTappedPlatform = dart.privateName(mapbox_gl_platform_interface, "MapboxGlPlatform.onSymbolTappedPlatform");
  var onLineTappedPlatform = dart.privateName(mapbox_gl_platform_interface, "MapboxGlPlatform.onLineTappedPlatform");
  var onCircleTappedPlatform = dart.privateName(mapbox_gl_platform_interface, "MapboxGlPlatform.onCircleTappedPlatform");
  var onFillTappedPlatform = dart.privateName(mapbox_gl_platform_interface, "MapboxGlPlatform.onFillTappedPlatform");
  var onCameraMoveStartedPlatform = dart.privateName(mapbox_gl_platform_interface, "MapboxGlPlatform.onCameraMoveStartedPlatform");
  var onCameraMovePlatform = dart.privateName(mapbox_gl_platform_interface, "MapboxGlPlatform.onCameraMovePlatform");
  var onCameraIdlePlatform = dart.privateName(mapbox_gl_platform_interface, "MapboxGlPlatform.onCameraIdlePlatform");
  var onMapStyleLoadedPlatform = dart.privateName(mapbox_gl_platform_interface, "MapboxGlPlatform.onMapStyleLoadedPlatform");
  var onMapClickPlatform = dart.privateName(mapbox_gl_platform_interface, "MapboxGlPlatform.onMapClickPlatform");
  var onMapLongClickPlatform = dart.privateName(mapbox_gl_platform_interface, "MapboxGlPlatform.onMapLongClickPlatform");
  var onAttributionClickPlatform = dart.privateName(mapbox_gl_platform_interface, "MapboxGlPlatform.onAttributionClickPlatform");
  var onCameraTrackingChangedPlatform = dart.privateName(mapbox_gl_platform_interface, "MapboxGlPlatform.onCameraTrackingChangedPlatform");
  var onCameraTrackingDismissedPlatform = dart.privateName(mapbox_gl_platform_interface, "MapboxGlPlatform.onCameraTrackingDismissedPlatform");
  var onMapIdlePlatform = dart.privateName(mapbox_gl_platform_interface, "MapboxGlPlatform.onMapIdlePlatform");
  var onUserLocationUpdatedPlatform = dart.privateName(mapbox_gl_platform_interface, "MapboxGlPlatform.onUserLocationUpdatedPlatform");
  mapbox_gl_platform_interface.MapboxGlPlatform = class MapboxGlPlatform extends core.Object {
    get onInfoWindowTappedPlatform() {
      return this[onInfoWindowTappedPlatform];
    }
    set onInfoWindowTappedPlatform(value) {
      super.onInfoWindowTappedPlatform = value;
    }
    get onSymbolTappedPlatform() {
      return this[onSymbolTappedPlatform];
    }
    set onSymbolTappedPlatform(value) {
      super.onSymbolTappedPlatform = value;
    }
    get onLineTappedPlatform() {
      return this[onLineTappedPlatform];
    }
    set onLineTappedPlatform(value) {
      super.onLineTappedPlatform = value;
    }
    get onCircleTappedPlatform() {
      return this[onCircleTappedPlatform];
    }
    set onCircleTappedPlatform(value) {
      super.onCircleTappedPlatform = value;
    }
    get onFillTappedPlatform() {
      return this[onFillTappedPlatform];
    }
    set onFillTappedPlatform(value) {
      super.onFillTappedPlatform = value;
    }
    get onCameraMoveStartedPlatform() {
      return this[onCameraMoveStartedPlatform];
    }
    set onCameraMoveStartedPlatform(value) {
      super.onCameraMoveStartedPlatform = value;
    }
    get onCameraMovePlatform() {
      return this[onCameraMovePlatform];
    }
    set onCameraMovePlatform(value) {
      super.onCameraMovePlatform = value;
    }
    get onCameraIdlePlatform() {
      return this[onCameraIdlePlatform];
    }
    set onCameraIdlePlatform(value) {
      super.onCameraIdlePlatform = value;
    }
    get onMapStyleLoadedPlatform() {
      return this[onMapStyleLoadedPlatform];
    }
    set onMapStyleLoadedPlatform(value) {
      super.onMapStyleLoadedPlatform = value;
    }
    get onMapClickPlatform() {
      return this[onMapClickPlatform];
    }
    set onMapClickPlatform(value) {
      super.onMapClickPlatform = value;
    }
    get onMapLongClickPlatform() {
      return this[onMapLongClickPlatform];
    }
    set onMapLongClickPlatform(value) {
      super.onMapLongClickPlatform = value;
    }
    get onAttributionClickPlatform() {
      return this[onAttributionClickPlatform];
    }
    set onAttributionClickPlatform(value) {
      super.onAttributionClickPlatform = value;
    }
    get onCameraTrackingChangedPlatform() {
      return this[onCameraTrackingChangedPlatform];
    }
    set onCameraTrackingChangedPlatform(value) {
      super.onCameraTrackingChangedPlatform = value;
    }
    get onCameraTrackingDismissedPlatform() {
      return this[onCameraTrackingDismissedPlatform];
    }
    set onCameraTrackingDismissedPlatform(value) {
      super.onCameraTrackingDismissedPlatform = value;
    }
    get onMapIdlePlatform() {
      return this[onMapIdlePlatform];
    }
    set onMapIdlePlatform(value) {
      super.onMapIdlePlatform = value;
    }
    get onUserLocationUpdatedPlatform() {
      return this[onUserLocationUpdatedPlatform];
    }
    set onUserLocationUpdatedPlatform(value) {
      super.onUserLocationUpdatedPlatform = value;
    }
    static addInstance(id, platform) {
      mapbox_gl_platform_interface.MapboxGlPlatform._instances[$_set](id, platform);
    }
    static getInstance(id) {
      return dart.nullCheck(mapbox_gl_platform_interface.MapboxGlPlatform._instances[$_get](id));
    }
    initPlatform(id) {
      return async.async(dart.void, function* initPlatform() {
        dart.throw(new core.UnimplementedError.new("initPlatform() has not been implemented."));
      });
    }
    buildView(creationParams, onPlatformViewCreated, gestureRecognizers) {
      dart.throw(new core.UnimplementedError.new("buildView() has not been implemented."));
    }
    updateMapOptions(optionsUpdate) {
      return async.async(T.CameraPositionN(), function* updateMapOptions() {
        dart.throw(new core.UnimplementedError.new("updateMapOptions() has not been implemented."));
      });
    }
    animateCamera(cameraUpdate) {
      return async.async(T.boolN(), function* animateCamera() {
        dart.throw(new core.UnimplementedError.new("animateCamera() has not been implemented."));
      });
    }
    moveCamera(cameraUpdate) {
      return async.async(T.boolN(), function* moveCamera() {
        dart.throw(new core.UnimplementedError.new("moveCamera() has not been implemented."));
      });
    }
    updateMyLocationTrackingMode(myLocationTrackingMode) {
      return async.async(dart.void, function* updateMyLocationTrackingMode() {
        dart.throw(new core.UnimplementedError.new("updateMyLocationTrackingMode() has not been implemented."));
      });
    }
    matchMapLanguageWithDeviceDefault() {
      return async.async(dart.void, function* matchMapLanguageWithDeviceDefault() {
        dart.throw(new core.UnimplementedError.new("matchMapLanguageWithDeviceDefault() has not been implemented."));
      });
    }
    updateContentInsets(insets, animated) {
      return async.async(dart.void, function* updateContentInsets() {
        dart.throw(new core.UnimplementedError.new("updateContentInsets() has not been implemented."));
      });
    }
    setMapLanguage(language) {
      return async.async(dart.void, function* setMapLanguage() {
        dart.throw(new core.UnimplementedError.new("setMapLanguage() has not been implemented."));
      });
    }
    setTelemetryEnabled(enabled) {
      return async.async(dart.void, function* setTelemetryEnabled() {
        dart.throw(new core.UnimplementedError.new("setTelemetryEnabled() has not been implemented."));
      });
    }
    getTelemetryEnabled() {
      return async.async(core.bool, function* getTelemetryEnabled() {
        dart.throw(new core.UnimplementedError.new("getTelemetryEnabled() has not been implemented."));
      });
    }
    addSymbols(options, data = null) {
      return async.async(T.ListOfSymbol(), function* addSymbols() {
        dart.throw(new core.UnimplementedError.new("addSymbols() has not been implemented."));
      });
    }
    updateSymbol(symbol, changes) {
      return async.async(dart.void, function* updateSymbol() {
        dart.throw(new core.UnimplementedError.new("updateSymbol() has not been implemented."));
      });
    }
    removeSymbols(symbolsIds) {
      return async.async(dart.void, function* removeSymbols() {
        dart.throw(new core.UnimplementedError.new("removeSymbol() has not been implemented."));
      });
    }
    addLine(options, data = null) {
      return async.async(mapbox_gl_platform_interface.Line, function* addLine() {
        dart.throw(new core.UnimplementedError.new("addLine() has not been implemented."));
      });
    }
    addLines(options, data = null) {
      return async.async(T.ListOfLine(), function* addLines() {
        dart.throw(new core.UnimplementedError.new("addLines() has not been implemented."));
      });
    }
    updateLine(line, changes) {
      return async.async(dart.void, function* updateLine() {
        dart.throw(new core.UnimplementedError.new("updateLine() has not been implemented."));
      });
    }
    removeLine(lineId) {
      return async.async(dart.void, function* removeLine() {
        dart.throw(new core.UnimplementedError.new("removeLine() has not been implemented."));
      });
    }
    removeLines(ids) {
      return async.async(dart.void, function* removeLines() {
        dart.throw(new core.UnimplementedError.new("removeLines() has not been implemented."));
      });
    }
    addCircle(options, data = null) {
      return async.async(mapbox_gl_platform_interface.Circle, function* addCircle() {
        dart.throw(new core.UnimplementedError.new("addCircle() has not been implemented."));
      });
    }
    addCircles(options, data = null) {
      return async.async(T.ListOfCircle(), function* addCircles() {
        dart.throw(new core.UnimplementedError.new("addCircles() has not been implemented."));
      });
    }
    updateCircle(circle, changes) {
      return async.async(dart.void, function* updateCircle() {
        dart.throw(new core.UnimplementedError.new("updateCircle() has not been implemented."));
      });
    }
    getCircleLatLng(circle) {
      return async.async(mapbox_gl_platform_interface.LatLng, function* getCircleLatLng() {
        dart.throw(new core.UnimplementedError.new("getCircleLatLng() has not been implemented."));
      });
    }
    getSymbolLatLng(symbol) {
      return async.async(mapbox_gl_platform_interface.LatLng, function* getSymbolLatLng() {
        dart.throw(new core.UnimplementedError.new("getSymbolLatLng() has not been implemented."));
      });
    }
    getLineLatLngs(line) {
      return async.async(T.ListOfLatLng(), function* getLineLatLngs() {
        dart.throw(new core.UnimplementedError.new("getLineLatLngs() has not been implemented."));
      });
    }
    removeCircle(circleId) {
      return async.async(dart.void, function* removeCircle() {
        dart.throw(new core.UnimplementedError.new("removeCircle() has not been implemented."));
      });
    }
    removeCircles(ids) {
      return async.async(dart.void, function* removeCircles() {
        dart.throw(new core.UnimplementedError.new("removeCircles() has not been implemented."));
      });
    }
    addFill(options, data = null) {
      return async.async(mapbox_gl_platform_interface.Fill, function* addFill() {
        dart.throw(new core.UnimplementedError.new("addFill() has not been implemented."));
      });
    }
    addFills(options, data = null) {
      return async.async(T.ListOfFill(), function* addFills() {
        dart.throw(new core.UnimplementedError.new("addFills() has not been implemented."));
      });
    }
    updateFill(fill, changes) {
      return async.async(dart.void, function* updateFill() {
        dart.throw(new core.UnimplementedError.new("updateFill() has not been implemented."));
      });
    }
    removeFill(fillId) {
      return async.async(dart.void, function* removeFill() {
        dart.throw(new core.UnimplementedError.new("removeFill() has not been implemented."));
      });
    }
    removeFills(fillIds) {
      return async.async(dart.void, function* removeFills() {
        dart.throw(new core.UnimplementedError.new("removeFills() has not been implemented."));
      });
    }
    queryRenderedFeatures(point, layerIds, filter) {
      return async.async(core.List, function* queryRenderedFeatures() {
        dart.throw(new core.UnimplementedError.new("queryRenderedFeatures() has not been implemented."));
      });
    }
    queryRenderedFeaturesInRect(rect, layerIds, filter) {
      return async.async(core.List, function* queryRenderedFeaturesInRect() {
        dart.throw(new core.UnimplementedError.new("queryRenderedFeaturesInRect() has not been implemented."));
      });
    }
    invalidateAmbientCache() {
      return async.async(dart.dynamic, function* invalidateAmbientCache() {
        dart.throw(new core.UnimplementedError.new("invalidateAmbientCache() has not been implemented."));
      });
    }
    requestMyLocationLatLng() {
      return async.async(T.LatLngN(), function* requestMyLocationLatLng() {
        dart.throw(new core.UnimplementedError.new("requestMyLocationLatLng() has not been implemented."));
      });
    }
    getVisibleRegion() {
      return async.async(mapbox_gl_platform_interface.LatLngBounds, function* getVisibleRegion() {
        dart.throw(new core.UnimplementedError.new("getVisibleRegion() has not been implemented."));
      });
    }
    addImage(name, bytes, sdf = false) {
      return async.async(dart.void, function* addImage() {
        dart.throw(new core.UnimplementedError.new("addImage() has not been implemented."));
      });
    }
    setSymbolIconAllowOverlap(enable) {
      return async.async(dart.void, function* setSymbolIconAllowOverlap() {
        dart.throw(new core.UnimplementedError.new("setSymbolIconAllowOverlap() has not been implemented."));
      });
    }
    setSymbolIconIgnorePlacement(enable) {
      return async.async(dart.void, function* setSymbolIconIgnorePlacement() {
        dart.throw(new core.UnimplementedError.new("setSymbolIconIgnorePlacement() has not been implemented."));
      });
    }
    setSymbolTextAllowOverlap(enable) {
      return async.async(dart.void, function* setSymbolTextAllowOverlap() {
        dart.throw(new core.UnimplementedError.new("setSymbolTextAllowOverlap() has not been implemented."));
      });
    }
    setSymbolTextIgnorePlacement(enable) {
      return async.async(dart.void, function* setSymbolTextIgnorePlacement() {
        dart.throw(new core.UnimplementedError.new("setSymbolTextIgnorePlacement() has not been implemented."));
      });
    }
    addImageSource(imageSourceId, bytes, coordinates) {
      return async.async(dart.void, function* addImageSource() {
        dart.throw(new core.UnimplementedError.new("addImageSource() has not been implemented."));
      });
    }
    removeImageSource(imageSourceId) {
      return async.async(dart.void, function* removeImageSource() {
        dart.throw(new core.UnimplementedError.new("removeImageSource() has not been implemented."));
      });
    }
    addLayer(imageLayerId, imageSourceId) {
      return async.async(dart.void, function* addLayer() {
        dart.throw(new core.UnimplementedError.new("addLayer() has not been implemented."));
      });
    }
    addLayerBelow(imageLayerId, imageSourceId, belowLayerId) {
      return async.async(dart.void, function* addLayerBelow() {
        dart.throw(new core.UnimplementedError.new("addLayerBelow() has not been implemented."));
      });
    }
    removeLayer(imageLayerId) {
      return async.async(dart.void, function* removeLayer() {
        dart.throw(new core.UnimplementedError.new("removeLayer() has not been implemented."));
      });
    }
    toScreenLocation(latLng) {
      return async.async(T.PointOfnum(), function* toScreenLocation() {
        dart.throw(new core.UnimplementedError.new("toScreenLocation() has not been implemented."));
      });
    }
    toScreenLocationBatch(latLngs) {
      return async.async(T.ListOfPointOfnum(), function* toScreenLocationBatch() {
        dart.throw(new core.UnimplementedError.new("toScreenLocationList() has not been implemented."));
      });
    }
    toLatLng(screenLocation) {
      return async.async(mapbox_gl_platform_interface.LatLng, function* toLatLng() {
        dart.throw(new core.UnimplementedError.new("toLatLng() has not been implemented."));
      });
    }
    getMetersPerPixelAtLatitude(latitude) {
      return async.async(core.double, function* getMetersPerPixelAtLatitude() {
        dart.throw(new core.UnimplementedError.new("getMetersPerPixelAtLatitude() has not been implemented."));
      });
    }
  };
  (mapbox_gl_platform_interface.MapboxGlPlatform.new = function() {
    this[onInfoWindowTappedPlatform] = new (T.ArgumentCallbacksOfString()).new();
    this[onSymbolTappedPlatform] = new (T.ArgumentCallbacksOfString()).new();
    this[onLineTappedPlatform] = new (T.ArgumentCallbacksOfString()).new();
    this[onCircleTappedPlatform] = new (T.ArgumentCallbacksOfString()).new();
    this[onFillTappedPlatform] = new (T.ArgumentCallbacksOfString()).new();
    this[onCameraMoveStartedPlatform] = new (T.ArgumentCallbacksOfvoid()).new();
    this[onCameraMovePlatform] = new (T.ArgumentCallbacksOfCameraPosition()).new();
    this[onCameraIdlePlatform] = new (T.ArgumentCallbacksOfCameraPositionN()).new();
    this[onMapStyleLoadedPlatform] = new (T.ArgumentCallbacksOfvoid()).new();
    this[onMapClickPlatform] = new (T.ArgumentCallbacksOfMapOfString$dynamic()).new();
    this[onMapLongClickPlatform] = new (T.ArgumentCallbacksOfMapOfString$dynamic()).new();
    this[onAttributionClickPlatform] = new (T.ArgumentCallbacksOfvoid()).new();
    this[onCameraTrackingChangedPlatform] = new (T.ArgumentCallbacksOfMyLocationTrackingMode()).new();
    this[onCameraTrackingDismissedPlatform] = new (T.ArgumentCallbacksOfvoid()).new();
    this[onMapIdlePlatform] = new (T.ArgumentCallbacksOfvoid()).new();
    this[onUserLocationUpdatedPlatform] = new (T.ArgumentCallbacksOfUserLocation()).new();
    ;
  }).prototype = mapbox_gl_platform_interface.MapboxGlPlatform.prototype;
  dart.addTypeTests(mapbox_gl_platform_interface.MapboxGlPlatform);
  dart.addTypeCaches(mapbox_gl_platform_interface.MapboxGlPlatform);
  dart.setMethodSignature(mapbox_gl_platform_interface.MapboxGlPlatform, () => ({
    __proto__: dart.getMethods(mapbox_gl_platform_interface.MapboxGlPlatform.__proto__),
    initPlatform: dart.fnType(async.Future$(dart.void), [core.int]),
    buildView: dart.fnType(framework.Widget, [core.Map$(core.String, dart.dynamic), dart.fnType(dart.void, [core.int]), dart.nullable(core.Set$(basic_types.Factory$(recognizer.OneSequenceGestureRecognizer)))]),
    updateMapOptions: dart.fnType(async.Future$(dart.nullable(mapbox_gl_platform_interface.CameraPosition)), [core.Map$(core.String, dart.dynamic)]),
    animateCamera: dart.fnType(async.Future$(dart.nullable(core.bool)), [mapbox_gl_platform_interface.CameraUpdate]),
    moveCamera: dart.fnType(async.Future$(dart.nullable(core.bool)), [mapbox_gl_platform_interface.CameraUpdate]),
    updateMyLocationTrackingMode: dart.fnType(async.Future$(dart.void), [mapbox_gl_platform_interface.MyLocationTrackingMode]),
    matchMapLanguageWithDeviceDefault: dart.fnType(async.Future$(dart.void), []),
    updateContentInsets: dart.fnType(async.Future$(dart.void), [edge_insets.EdgeInsets, core.bool]),
    setMapLanguage: dart.fnType(async.Future$(dart.void), [core.String]),
    setTelemetryEnabled: dart.fnType(async.Future$(dart.void), [core.bool]),
    getTelemetryEnabled: dart.fnType(async.Future$(core.bool), []),
    addSymbols: dart.fnType(async.Future$(core.List$(mapbox_gl_platform_interface.Symbol)), [core.List$(mapbox_gl_platform_interface.SymbolOptions)], [dart.nullable(core.List$(core.Map))]),
    updateSymbol: dart.fnType(async.Future$(dart.void), [mapbox_gl_platform_interface.Symbol, mapbox_gl_platform_interface.SymbolOptions]),
    removeSymbols: dart.fnType(async.Future$(dart.void), [core.Iterable$(core.String)]),
    addLine: dart.fnType(async.Future$(mapbox_gl_platform_interface.Line), [mapbox_gl_platform_interface.LineOptions], [dart.nullable(core.Map)]),
    addLines: dart.fnType(async.Future$(core.List$(mapbox_gl_platform_interface.Line)), [core.List$(mapbox_gl_platform_interface.LineOptions)], [dart.nullable(core.List$(core.Map))]),
    updateLine: dart.fnType(async.Future$(dart.void), [mapbox_gl_platform_interface.Line, mapbox_gl_platform_interface.LineOptions]),
    removeLine: dart.fnType(async.Future$(dart.void), [core.String]),
    removeLines: dart.fnType(async.Future$(dart.void), [core.Iterable$(core.String)]),
    addCircle: dart.fnType(async.Future$(mapbox_gl_platform_interface.Circle), [mapbox_gl_platform_interface.CircleOptions], [dart.nullable(core.Map)]),
    addCircles: dart.fnType(async.Future$(core.List$(mapbox_gl_platform_interface.Circle)), [core.List$(mapbox_gl_platform_interface.CircleOptions)], [dart.nullable(core.List$(core.Map))]),
    updateCircle: dart.fnType(async.Future$(dart.void), [mapbox_gl_platform_interface.Circle, mapbox_gl_platform_interface.CircleOptions]),
    getCircleLatLng: dart.fnType(async.Future$(mapbox_gl_platform_interface.LatLng), [mapbox_gl_platform_interface.Circle]),
    getSymbolLatLng: dart.fnType(async.Future$(mapbox_gl_platform_interface.LatLng), [mapbox_gl_platform_interface.Symbol]),
    getLineLatLngs: dart.fnType(async.Future$(core.List$(mapbox_gl_platform_interface.LatLng)), [mapbox_gl_platform_interface.Line]),
    removeCircle: dart.fnType(async.Future$(dart.void), [core.String]),
    removeCircles: dart.fnType(async.Future$(dart.void), [core.Iterable$(core.String)]),
    addFill: dart.fnType(async.Future$(mapbox_gl_platform_interface.Fill), [mapbox_gl_platform_interface.FillOptions], [dart.nullable(core.Map)]),
    addFills: dart.fnType(async.Future$(core.List$(mapbox_gl_platform_interface.Fill)), [core.List$(mapbox_gl_platform_interface.FillOptions)], [dart.nullable(core.List$(core.Map))]),
    updateFill: dart.fnType(async.Future$(dart.void), [mapbox_gl_platform_interface.Fill, mapbox_gl_platform_interface.FillOptions]),
    removeFill: dart.fnType(async.Future$(dart.void), [core.String]),
    removeFills: dart.fnType(async.Future$(dart.void), [core.Iterable$(core.String)]),
    queryRenderedFeatures: dart.fnType(async.Future$(core.List), [math.Point$(core.double), core.List$(core.String), dart.nullable(core.List$(core.Object))]),
    queryRenderedFeaturesInRect: dart.fnType(async.Future$(core.List), [ui.Rect, core.List$(core.String), dart.nullable(core.String)]),
    invalidateAmbientCache: dart.fnType(async.Future, []),
    requestMyLocationLatLng: dart.fnType(async.Future$(dart.nullable(mapbox_gl_platform_interface.LatLng)), []),
    getVisibleRegion: dart.fnType(async.Future$(mapbox_gl_platform_interface.LatLngBounds), []),
    addImage: dart.fnType(async.Future$(dart.void), [core.String, typed_data.Uint8List], [core.bool]),
    setSymbolIconAllowOverlap: dart.fnType(async.Future$(dart.void), [core.bool]),
    setSymbolIconIgnorePlacement: dart.fnType(async.Future$(dart.void), [core.bool]),
    setSymbolTextAllowOverlap: dart.fnType(async.Future$(dart.void), [core.bool]),
    setSymbolTextIgnorePlacement: dart.fnType(async.Future$(dart.void), [core.bool]),
    addImageSource: dart.fnType(async.Future$(dart.void), [core.String, typed_data.Uint8List, mapbox_gl_platform_interface.LatLngQuad]),
    removeImageSource: dart.fnType(async.Future$(dart.void), [core.String]),
    addLayer: dart.fnType(async.Future$(dart.void), [core.String, core.String]),
    addLayerBelow: dart.fnType(async.Future$(dart.void), [core.String, core.String, core.String]),
    removeLayer: dart.fnType(async.Future$(dart.void), [core.String]),
    toScreenLocation: dart.fnType(async.Future$(math.Point$(core.num)), [mapbox_gl_platform_interface.LatLng]),
    toScreenLocationBatch: dart.fnType(async.Future$(core.List$(math.Point$(core.num))), [core.Iterable$(mapbox_gl_platform_interface.LatLng)]),
    toLatLng: dart.fnType(async.Future$(mapbox_gl_platform_interface.LatLng), [math.Point$(core.num)]),
    getMetersPerPixelAtLatitude: dart.fnType(async.Future$(core.double), [core.double])
  }));
  dart.setLibraryUri(mapbox_gl_platform_interface.MapboxGlPlatform, I[0]);
  dart.setFieldSignature(mapbox_gl_platform_interface.MapboxGlPlatform, () => ({
    __proto__: dart.getFields(mapbox_gl_platform_interface.MapboxGlPlatform.__proto__),
    onInfoWindowTappedPlatform: dart.finalFieldType(mapbox_gl_platform_interface.ArgumentCallbacks$(core.String)),
    onSymbolTappedPlatform: dart.finalFieldType(mapbox_gl_platform_interface.ArgumentCallbacks$(core.String)),
    onLineTappedPlatform: dart.finalFieldType(mapbox_gl_platform_interface.ArgumentCallbacks$(core.String)),
    onCircleTappedPlatform: dart.finalFieldType(mapbox_gl_platform_interface.ArgumentCallbacks$(core.String)),
    onFillTappedPlatform: dart.finalFieldType(mapbox_gl_platform_interface.ArgumentCallbacks$(core.String)),
    onCameraMoveStartedPlatform: dart.finalFieldType(mapbox_gl_platform_interface.ArgumentCallbacks$(dart.void)),
    onCameraMovePlatform: dart.finalFieldType(mapbox_gl_platform_interface.ArgumentCallbacks$(mapbox_gl_platform_interface.CameraPosition)),
    onCameraIdlePlatform: dart.finalFieldType(mapbox_gl_platform_interface.ArgumentCallbacks$(dart.nullable(mapbox_gl_platform_interface.CameraPosition))),
    onMapStyleLoadedPlatform: dart.finalFieldType(mapbox_gl_platform_interface.ArgumentCallbacks$(dart.void)),
    onMapClickPlatform: dart.finalFieldType(mapbox_gl_platform_interface.ArgumentCallbacks$(core.Map$(core.String, dart.dynamic))),
    onMapLongClickPlatform: dart.finalFieldType(mapbox_gl_platform_interface.ArgumentCallbacks$(core.Map$(core.String, dart.dynamic))),
    onAttributionClickPlatform: dart.finalFieldType(mapbox_gl_platform_interface.ArgumentCallbacks$(dart.void)),
    onCameraTrackingChangedPlatform: dart.finalFieldType(mapbox_gl_platform_interface.ArgumentCallbacks$(mapbox_gl_platform_interface.MyLocationTrackingMode)),
    onCameraTrackingDismissedPlatform: dart.finalFieldType(mapbox_gl_platform_interface.ArgumentCallbacks$(dart.void)),
    onMapIdlePlatform: dart.finalFieldType(mapbox_gl_platform_interface.ArgumentCallbacks$(dart.void)),
    onUserLocationUpdatedPlatform: dart.finalFieldType(mapbox_gl_platform_interface.ArgumentCallbacks$(mapbox_gl_platform_interface.UserLocation))
  }));
  dart.defineLazy(mapbox_gl_platform_interface.MapboxGlPlatform, {
    /*mapbox_gl_platform_interface.MapboxGlPlatform.createInstance*/get createInstance() {
      return dart.fn(() => new mapbox_gl_platform_interface.MethodChannelMapboxGl.new(), T.VoidToMethodChannelMapboxGl());
    },
    set createInstance(_) {},
    /*mapbox_gl_platform_interface.MapboxGlPlatform._instances*/get _instances() {
      return new (T.IdentityMapOfint$MapboxGlPlatform()).new();
    },
    set _instances(_) {}
  }, false);
  mapbox_gl_platform_interface.MethodChannelMapboxGl = class MethodChannelMapboxGl extends mapbox_gl_platform_interface.MapboxGlPlatform {
    get [_channel]() {
      let t0;
      t0 = this[__MethodChannelMapboxGl__channel];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("_channel")) : t0;
    }
    set [_channel](t0) {
      this[__MethodChannelMapboxGl__channel] = t0;
    }
    [_handleMethodCall](call) {
      return async.async(dart.dynamic, (function* _handleMethodCall() {
        let t1, t1$, t1$0, t1$1, t1$2, t1$3, t1$4, t1$5, t1$6, t1$7, t1$8, t1$9, t1$10, t1$11, t1$12, t1$13;
        switch (call.method) {
          case "infoWindow#onTap":
          {
            let symbolId = T.StringN().as(dart.dsend(call.arguments, '_get', ["symbol"]));
            if (symbolId != null) {
              t1 = symbolId;
              this.onInfoWindowTappedPlatform.call(t1);
            }
            break;
          }
          case "symbol#onTap":
          {
            let symbolId = T.StringN().as(dart.dsend(call.arguments, '_get', ["symbol"]));
            if (symbolId != null) {
              t1$ = symbolId;
              this.onSymbolTappedPlatform.call(t1$);
            }
            break;
          }
          case "line#onTap":
          {
            let lineId = T.StringN().as(dart.dsend(call.arguments, '_get', ["line"]));
            if (lineId != null) {
              t1$0 = lineId;
              this.onLineTappedPlatform.call(t1$0);
            }
            break;
          }
          case "circle#onTap":
          {
            let circleId = T.StringN().as(dart.dsend(call.arguments, '_get', ["circle"]));
            if (circleId != null) {
              t1$1 = circleId;
              this.onCircleTappedPlatform.call(t1$1);
            }
            break;
          }
          case "fill#onTap":
          {
            let fillId = T.StringN().as(dart.dsend(call.arguments, '_get', ["fill"]));
            if (fillId != null) {
              t1$2 = fillId;
              this.onFillTappedPlatform.call(t1$2);
            }
            break;
          }
          case "camera#onMoveStarted":
          {
            t1$3 = null;
            this.onCameraMoveStartedPlatform.call(t1$3);
            break;
          }
          case "camera#onMove":
          {
            let cameraPosition = dart.nullCheck(mapbox_gl_platform_interface.CameraPosition.fromMap(dart.dsend(call.arguments, '_get', ["position"])));
            t1$4 = cameraPosition;
            this.onCameraMovePlatform.call(t1$4);
            break;
          }
          case "camera#onIdle":
          {
            let cameraPosition = mapbox_gl_platform_interface.CameraPosition.fromMap(dart.dsend(call.arguments, '_get', ["position"]));
            t1$5 = cameraPosition;
            this.onCameraIdlePlatform.call(t1$5);
            break;
          }
          case "map#onStyleLoaded":
          {
            t1$6 = null;
            this.onMapStyleLoadedPlatform.call(t1$6);
            break;
          }
          case "map#onMapClick":
          {
            let x = core.double.as(dart.dsend(call.arguments, '_get', ["x"]));
            let y = core.double.as(dart.dsend(call.arguments, '_get', ["y"]));
            let lng = core.double.as(dart.dsend(call.arguments, '_get', ["lng"]));
            let lat = core.double.as(dart.dsend(call.arguments, '_get', ["lat"]));
            t1$7 = new (T.IdentityMapOfString$dynamic()).from(["point", new (T.PointOfdouble()).new(x, y), "latLng", new mapbox_gl_platform_interface.LatLng.new(lat, lng)]);
            this.onMapClickPlatform.call(t1$7);
            break;
          }
          case "map#onMapLongClick":
          {
            let x = core.double.as(dart.dsend(call.arguments, '_get', ["x"]));
            let y = core.double.as(dart.dsend(call.arguments, '_get', ["y"]));
            let lng = core.double.as(dart.dsend(call.arguments, '_get', ["lng"]));
            let lat = core.double.as(dart.dsend(call.arguments, '_get', ["lat"]));
            t1$8 = new (T.IdentityMapOfString$dynamic()).from(["point", new (T.PointOfdouble()).new(x, y), "latLng", new mapbox_gl_platform_interface.LatLng.new(lat, lng)]);
            this.onMapLongClickPlatform.call(t1$8);
            break;
          }
          case "map#onAttributionClick":
          {
            t1$9 = null;
            this.onAttributionClickPlatform.call(t1$9);
            break;
          }
          case "map#onCameraTrackingChanged":
          {
            let mode = core.int.as(dart.dsend(call.arguments, '_get', ["mode"]));
            t1$10 = mapbox_gl_platform_interface.MyLocationTrackingMode.values[$_get](mode);
            this.onCameraTrackingChangedPlatform.call(t1$10);
            break;
          }
          case "map#onCameraTrackingDismissed":
          {
            t1$11 = null;
            this.onCameraTrackingDismissedPlatform.call(t1$11);
            break;
          }
          case "map#onIdle":
          {
            t1$12 = null;
            this.onMapIdlePlatform.call(t1$12);
            break;
          }
          case "map#onUserLocationUpdated":
          {
            let userLocation = dart.dsend(call.arguments, '_get', ["userLocation"]);
            let heading = dart.dsend(call.arguments, '_get', ["heading"]);
            t1$13 = new mapbox_gl_platform_interface.UserLocation.new({position: new mapbox_gl_platform_interface.LatLng.new(core.double.as(dart.dsend(dart.dsend(userLocation, '_get', ["position"]), '_get', [0])), core.double.as(dart.dsend(dart.dsend(userLocation, '_get', ["position"]), '_get', [1]))), altitude: T.doubleN().as(dart.dsend(userLocation, '_get', ["altitude"])), bearing: T.doubleN().as(dart.dsend(userLocation, '_get', ["bearing"])), speed: T.doubleN().as(dart.dsend(userLocation, '_get', ["speed"])), horizontalAccuracy: T.doubleN().as(dart.dsend(userLocation, '_get', ["horizontalAccuracy"])), verticalAccuracy: T.doubleN().as(dart.dsend(userLocation, '_get', ["verticalAccuracy"])), heading: heading == null ? null : new mapbox_gl_platform_interface.UserHeading.new({magneticHeading: T.doubleN().as(dart.dsend(heading, '_get', ["magneticHeading"])), trueHeading: T.doubleN().as(dart.dsend(heading, '_get', ["trueHeading"])), headingAccuracy: T.doubleN().as(dart.dsend(heading, '_get', ["headingAccuracy"])), x: T.doubleN().as(dart.dsend(heading, '_get', ["x"])), y: T.doubleN().as(dart.dsend(heading, '_get', ["y"])), z: T.doubleN().as(dart.dsend(heading, '_get', ["x"])), timestamp: new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(dart.dsend(heading, '_get', ["timestamp"])))}), timestamp: new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(dart.dsend(userLocation, '_get', ["timestamp"])))});
            this.onUserLocationUpdatedPlatform.call(t1$13);
            break;
          }
          default:
          {
            dart.throw(new message_codec.MissingPluginException.new());
          }
        }
      }).bind(this));
    }
    initPlatform(id) {
      return async.async(dart.void, (function* initPlatform() {
        this[_channel] = new platform_channel.MethodChannel.new("plugins.flutter.io/mapbox_maps_" + dart.str(id));
        yield this[_channel].invokeMethod(dart.dynamic, "map#waitForMap");
        this[_channel].setMethodCallHandler(dart.bind(this, _handleMethodCall));
      }).bind(this));
    }
    buildView(creationParams, onPlatformViewCreated, gestureRecognizers) {
      if (platform.defaultTargetPlatform === platform.TargetPlatform.android) {
        return new platform_view.AndroidView.new({viewType: "plugins.flutter.io/mapbox_gl", onPlatformViewCreated: onPlatformViewCreated, gestureRecognizers: gestureRecognizers, creationParams: creationParams, creationParamsCodec: C[2] || CT.C2, $creationLocationd_0dea112b090073317d4: C[3] || CT.C3});
      } else if (platform.defaultTargetPlatform === platform.TargetPlatform.iOS) {
        return new platform_view.UiKitView.new({viewType: "plugins.flutter.io/mapbox_gl", onPlatformViewCreated: onPlatformViewCreated, gestureRecognizers: gestureRecognizers, creationParams: creationParams, creationParamsCodec: C[2] || CT.C2, $creationLocationd_0dea112b090073317d4: C[10] || CT.C10});
      }
      return new text.Text.new(dart.str(platform.defaultTargetPlatform) + " is not yet supported by the maps plugin", {$creationLocationd_0dea112b090073317d4: C[17] || CT.C17});
    }
    updateMapOptions(optionsUpdate) {
      return async.async(T.CameraPositionN(), (function* updateMapOptions() {
        let json = (yield this[_channel].invokeMethod(dart.dynamic, "map#update", new (T.IdentityMapOfString$dynamic()).from(["options", optionsUpdate])));
        return mapbox_gl_platform_interface.CameraPosition.fromMap(json);
      }).bind(this));
    }
    animateCamera(cameraUpdate) {
      return async.async(T.boolN(), (function* animateCamera() {
        return yield this[_channel].invokeMethod(core.bool, "camera#animate", new (T.IdentityMapOfString$dynamic()).from(["cameraUpdate", cameraUpdate.toJson()]));
      }).bind(this));
    }
    moveCamera(cameraUpdate) {
      return async.async(T.boolN(), (function* moveCamera() {
        return yield this[_channel].invokeMethod(core.bool, "camera#move", new (T.IdentityMapOfString$dynamic()).from(["cameraUpdate", cameraUpdate.toJson()]));
      }).bind(this));
    }
    updateMyLocationTrackingMode(myLocationTrackingMode) {
      return async.async(dart.void, (function* updateMyLocationTrackingMode() {
        yield this[_channel].invokeMethod(dart.dynamic, "map#updateMyLocationTrackingMode", new (T.IdentityMapOfString$dynamic()).from(["mode", myLocationTrackingMode.index]));
      }).bind(this));
    }
    matchMapLanguageWithDeviceDefault() {
      return async.async(dart.void, (function* matchMapLanguageWithDeviceDefault() {
        yield this[_channel].invokeMethod(dart.dynamic, "map#matchMapLanguageWithDeviceDefault");
      }).bind(this));
    }
    updateContentInsets(insets, animated) {
      return async.async(dart.void, (function* updateContentInsets() {
        yield this[_channel].invokeMethod(dart.dynamic, "map#updateContentInsets", new (T.IdentityMapOfString$dynamic()).from(["bounds", new (T.IdentityMapOfString$double()).from(["top", insets.top, "left", insets.left, "bottom", insets.bottom, "right", insets.right]), "animated", animated]));
      }).bind(this));
    }
    setMapLanguage(language) {
      return async.async(dart.void, (function* setMapLanguage() {
        yield this[_channel].invokeMethod(dart.dynamic, "map#setMapLanguage", new (T.IdentityMapOfString$dynamic()).from(["language", language]));
      }).bind(this));
    }
    setTelemetryEnabled(enabled) {
      return async.async(dart.void, (function* setTelemetryEnabled() {
        yield this[_channel].invokeMethod(dart.dynamic, "map#setTelemetryEnabled", new (T.IdentityMapOfString$dynamic()).from(["enabled", enabled]));
      }).bind(this));
    }
    getTelemetryEnabled() {
      return async.async(core.bool, (function* getTelemetryEnabled() {
        return T.FutureOrOfbool().as(yield this[_channel].invokeMethod(dart.dynamic, "map#getTelemetryEnabled"));
      }).bind(this));
    }
    addSymbols(options, data = null) {
      return async.async(T.ListOfSymbol(), (function* addSymbols() {
        let symbolIds = core.List.as(yield this[_channel].invokeMethod(dart.dynamic, "symbols#addAll", new (T.IdentityMapOfString$dynamic()).from(["options", options[$map](dart.dynamic, dart.fn(o => o.toJson(), T.SymbolOptionsTodynamic()))[$toList]()])));
        let symbols = symbolIds[$asMap]()[$map](core.int, mapbox_gl_platform_interface.Symbol, dart.fn((i, id) => new (T.MapEntryOfint$Symbol()).__(i, new mapbox_gl_platform_interface.Symbol.new(core.String.as(id), options[$elementAt](i), data != null && data[$length] > i ? data[$elementAt](i) : null)), T.intAnddynamicToMapEntryOfint$Symbol()))[$values][$toList]();
        return symbols;
      }).bind(this));
    }
    updateSymbol(symbol, changes) {
      return async.async(dart.void, (function* updateSymbol() {
        yield this[_channel].invokeMethod(dart.dynamic, "symbol#update", new (T.IdentityMapOfString$dynamic()).from(["symbol", symbol.id, "options", changes.toJson()]));
      }).bind(this));
    }
    getSymbolLatLng(symbol) {
      return async.async(mapbox_gl_platform_interface.LatLng, (function* getSymbolLatLng() {
        let mapLatLng = core.Map.as(yield this[_channel].invokeMethod(dart.dynamic, "symbol#getGeometry", new (T.IdentityMapOfString$dynamic()).from(["symbol", symbol[_id$]])));
        let symbolLatLng = new mapbox_gl_platform_interface.LatLng.new(core.double.as(mapLatLng[$_get]("latitude")), core.double.as(mapLatLng[$_get]("longitude")));
        return symbolLatLng;
      }).bind(this));
    }
    removeSymbols(ids) {
      return async.async(dart.void, (function* removeSymbols() {
        yield this[_channel].invokeMethod(dart.dynamic, "symbols#removeAll", new (T.IdentityMapOfString$dynamic()).from(["ids", ids[$toList]()]));
      }).bind(this));
    }
    addLine(options, data = null) {
      return async.async(mapbox_gl_platform_interface.Line, (function* addLine() {
        let lineId = core.String.as(yield this[_channel].invokeMethod(dart.dynamic, "line#add", new (T.IdentityMapOfString$dynamic()).from(["options", options.toJson()])));
        return new mapbox_gl_platform_interface.Line.new(lineId, options, data);
      }).bind(this));
    }
    addLines(options, data = null) {
      return async.async(T.ListOfLine(), (function* addLines() {
        let ids = core.List.as(yield this[_channel].invokeMethod(dart.dynamic, "line#addAll", new (T.IdentityMapOfString$dynamic()).from(["options", options[$map](dart.dynamic, dart.fn(o => o.toJson(), T.LineOptionsTodynamic()))[$toList]()])));
        let lines = ids[$asMap]()[$map](core.int, mapbox_gl_platform_interface.Line, dart.fn((i, id) => new (T.MapEntryOfint$Line()).__(i, new mapbox_gl_platform_interface.Line.new(core.String.as(id), options[$elementAt](i), data != null && data[$length] > i ? data[$elementAt](i) : null)), T.intAnddynamicToMapEntryOfint$Line()))[$values][$toList]();
        return lines;
      }).bind(this));
    }
    updateLine(line, changes) {
      return async.async(dart.void, (function* updateLine() {
        yield this[_channel].invokeMethod(dart.dynamic, "line#update", new (T.IdentityMapOfString$dynamic()).from(["line", line.id, "options", changes.toJson()]));
      }).bind(this));
    }
    getLineLatLngs(line) {
      return async.async(T.ListOfLatLng(), (function* getLineLatLngs() {
        let latLngList = core.List.as(yield this[_channel].invokeMethod(dart.dynamic, "line#getGeometry", new (T.IdentityMapOfString$dynamic()).from(["line", line[_id$]])));
        let resultList = T.JSArrayOfLatLng().of([]);
        for (let latLng of latLngList) {
          resultList[$add](new mapbox_gl_platform_interface.LatLng.new(core.double.as(dart.dsend(latLng, '_get', ["latitude"])), core.double.as(dart.dsend(latLng, '_get', ["longitude"]))));
        }
        return resultList;
      }).bind(this));
    }
    removeLine(lineId) {
      return async.async(dart.void, (function* removeLine() {
        yield this[_channel].invokeMethod(dart.dynamic, "line#remove", new (T.IdentityMapOfString$dynamic()).from(["line", lineId]));
      }).bind(this));
    }
    removeLines(ids) {
      return async.async(dart.void, (function* removeLines() {
        yield this[_channel].invokeMethod(dart.dynamic, "line#removeAll", new (T.IdentityMapOfString$dynamic()).from(["ids", ids[$toList]()]));
      }).bind(this));
    }
    addCircle(options, data = null) {
      return async.async(mapbox_gl_platform_interface.Circle, (function* addCircle() {
        let circleId = core.String.as(yield this[_channel].invokeMethod(dart.dynamic, "circle#add", new (T.IdentityMapOfString$dynamic()).from(["options", options.toJson()])));
        return new mapbox_gl_platform_interface.Circle.new(circleId, options, data);
      }).bind(this));
    }
    addCircles(options, data = null) {
      return async.async(T.ListOfCircle(), (function* addCircles() {
        let ids = core.List.as(yield this[_channel].invokeMethod(dart.dynamic, "circle#addAll", new (T.IdentityMapOfString$dynamic()).from(["options", options[$map](dart.dynamic, dart.fn(o => o.toJson(), T.CircleOptionsTodynamic()))[$toList]()])));
        return ids[$asMap]()[$map](core.int, mapbox_gl_platform_interface.Circle, dart.fn((i, id) => new (T.MapEntryOfint$Circle()).__(i, new mapbox_gl_platform_interface.Circle.new(core.String.as(id), options[$elementAt](i), data != null && data[$length] > i ? data[$elementAt](i) : null)), T.intAnddynamicToMapEntryOfint$Circle()))[$values][$toList]();
      }).bind(this));
    }
    updateCircle(circle, changes) {
      return async.async(dart.void, (function* updateCircle() {
        yield this[_channel].invokeMethod(dart.dynamic, "circle#update", new (T.IdentityMapOfString$dynamic()).from(["circle", circle.id, "options", changes.toJson()]));
      }).bind(this));
    }
    getCircleLatLng(circle) {
      return async.async(mapbox_gl_platform_interface.LatLng, (function* getCircleLatLng() {
        let mapLatLng = core.Map.as(yield this[_channel].invokeMethod(dart.dynamic, "circle#getGeometry", new (T.IdentityMapOfString$dynamic()).from(["circle", circle.id])));
        return new mapbox_gl_platform_interface.LatLng.new(core.double.as(mapLatLng[$_get]("latitude")), core.double.as(mapLatLng[$_get]("longitude")));
      }).bind(this));
    }
    removeCircle(circleId) {
      return async.async(dart.void, (function* removeCircle() {
        yield this[_channel].invokeMethod(dart.dynamic, "circle#remove", new (T.IdentityMapOfString$dynamic()).from(["circle", circleId]));
      }).bind(this));
    }
    removeCircles(ids) {
      return async.async(dart.void, (function* removeCircles() {
        yield this[_channel].invokeMethod(dart.dynamic, "circle#removeAll", new (T.IdentityMapOfString$dynamic()).from(["ids", ids[$toList]()]));
      }).bind(this));
    }
    addFill(options, data = null) {
      return async.async(mapbox_gl_platform_interface.Fill, (function* addFill() {
        let fillId = core.String.as(yield this[_channel].invokeMethod(dart.dynamic, "fill#add", new (T.IdentityMapOfString$dynamic()).from(["options", options.toJson()])));
        return new mapbox_gl_platform_interface.Fill.new(fillId, options, data);
      }).bind(this));
    }
    addFills(options, data = null) {
      return async.async(T.ListOfFill(), (function* addFills() {
        let ids = core.List.as(yield this[_channel].invokeMethod(dart.dynamic, "fill#addAll", new (T.IdentityMapOfString$dynamic()).from(["options", options[$map](dart.dynamic, dart.fn(o => o.toJson(), T.FillOptionsTodynamic()))[$toList]()])));
        let fills = ids[$asMap]()[$map](core.int, mapbox_gl_platform_interface.Fill, dart.fn((i, id) => new (T.MapEntryOfint$Fill()).__(i, new mapbox_gl_platform_interface.Fill.new(core.String.as(id), options[$elementAt](i), data != null && data[$length] > i ? data[$elementAt](i) : null)), T.intAnddynamicToMapEntryOfint$Fill()))[$values][$toList]();
        return fills;
      }).bind(this));
    }
    updateFill(fill, changes) {
      return async.async(dart.void, (function* updateFill() {
        yield this[_channel].invokeMethod(dart.dynamic, "fill#update", new (T.IdentityMapOfString$dynamic()).from(["fill", fill.id, "options", changes.toJson()]));
      }).bind(this));
    }
    removeFill(fillId) {
      return async.async(dart.void, (function* removeFill() {
        yield this[_channel].invokeMethod(dart.dynamic, "fill#remove", new (T.IdentityMapOfString$dynamic()).from(["fill", fillId]));
      }).bind(this));
    }
    removeFills(ids) {
      return async.async(dart.void, (function* removeFills() {
        yield this[_channel].invokeMethod(dart.dynamic, "fill#removeAll", new (T.IdentityMapOfString$dynamic()).from(["ids", ids[$toList]()]));
      }).bind(this));
    }
    queryRenderedFeatures(point, layerIds, filter) {
      return async.async(core.List, (function* queryRenderedFeatures() {
        try {
          let reply = core.Map.as(yield this[_channel].invokeMethod(dart.dynamic, "map#queryRenderedFeatures", new (T.IdentityMapOfString$ObjectN()).from(["x", point.x, "y", point.y, "layerIds", layerIds, "filter", filter])));
          return T.FutureOrOfList().as(dart.dsend(dart.dsend(reply[$_get]("features"), 'map', [dart.fn(feature => convert.jsonDecode(core.String.as(feature)), T.dynamicTodynamic())]), 'toList', []));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (message_codec.PlatformException.is(e)) {
            return T.FutureOfList().error(e);
          } else
            throw e$;
        }
      }).bind(this));
    }
    queryRenderedFeaturesInRect(rect, layerIds, filter) {
      return async.async(core.List, (function* queryRenderedFeaturesInRect() {
        try {
          let reply = core.Map.as(yield this[_channel].invokeMethod(dart.dynamic, "map#queryRenderedFeatures", new (T.IdentityMapOfString$ObjectN()).from(["left", rect.left, "top", rect.top, "right", rect.right, "bottom", rect.bottom, "layerIds", layerIds, "filter", filter])));
          return T.FutureOrOfList().as(dart.dsend(dart.dsend(reply[$_get]("features"), 'map', [dart.fn(feature => convert.jsonDecode(core.String.as(feature)), T.dynamicTodynamic())]), 'toList', []));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (message_codec.PlatformException.is(e)) {
            return T.FutureOfList().error(e);
          } else
            throw e$;
        }
      }).bind(this));
    }
    invalidateAmbientCache() {
      return async.async(dart.dynamic, (function* invalidateAmbientCache() {
        try {
          yield this[_channel].invokeMethod(dart.dynamic, "map#invalidateAmbientCache");
          return null;
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (message_codec.PlatformException.is(e)) {
            return async.Future.error(e);
          } else
            throw e$;
        }
      }).bind(this));
    }
    requestMyLocationLatLng() {
      return async.async(mapbox_gl_platform_interface.LatLng, (function* requestMyLocationLatLng() {
        try {
          let reply = T.MapOfObject$Object().as(yield this[_channel].invokeMethod(dart.dynamic, "locationComponent#getLastLocation", null));
          let latitude = 0.0;
          let longitude = 0.0;
          if (reply[$containsKey]("latitude") && reply[$_get]("latitude") != null) {
            latitude = core.double.parse(dart.toString(reply[$_get]("latitude")));
          }
          if (reply[$containsKey]("longitude") && reply[$_get]("longitude") != null) {
            longitude = core.double.parse(dart.toString(reply[$_get]("longitude")));
          }
          return new mapbox_gl_platform_interface.LatLng.new(latitude, longitude);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (message_codec.PlatformException.is(e)) {
            return T.FutureOfLatLng().error(e);
          } else
            throw e$;
        }
      }).bind(this));
    }
    getVisibleRegion() {
      return async.async(mapbox_gl_platform_interface.LatLngBounds, (function* getVisibleRegion() {
        try {
          let reply = core.Map.as(yield this[_channel].invokeMethod(dart.dynamic, "map#getVisibleRegion", null));
          let southwest = core.List.as(reply[$_get]("sw"));
          let northeast = core.List.as(reply[$_get]("ne"));
          return new mapbox_gl_platform_interface.LatLngBounds.new({southwest: new mapbox_gl_platform_interface.LatLng.new(core.double.as(southwest[$_get](0)), core.double.as(southwest[$_get](1))), northeast: new mapbox_gl_platform_interface.LatLng.new(core.double.as(northeast[$_get](0)), core.double.as(northeast[$_get](1)))});
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (message_codec.PlatformException.is(e)) {
            return T.FutureOfLatLngBounds().error(e);
          } else
            throw e$;
        }
      }).bind(this));
    }
    addImage(name, bytes, sdf = false) {
      return async.async(dart.void, (function* addImage() {
        try {
          return yield this[_channel].invokeMethod(dart.void, "style#addImage", new (T.IdentityMapOfString$Object()).from(["name", name, "bytes", bytes, "length", bytes[$length], "sdf", sdf]));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (message_codec.PlatformException.is(e)) {
            return T.FutureOfvoid().error(e);
          } else
            throw e$;
        }
      }).bind(this));
    }
    setSymbolIconAllowOverlap(enable) {
      return async.async(dart.void, (function* setSymbolIconAllowOverlap() {
        try {
          yield this[_channel].invokeMethod(dart.dynamic, "symbolManager#iconAllowOverlap", new (T.IdentityMapOfString$dynamic()).from(["iconAllowOverlap", enable]));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (message_codec.PlatformException.is(e)) {
            return T.FutureOfvoid().error(e);
          } else
            throw e$;
        }
      }).bind(this));
    }
    setSymbolIconIgnorePlacement(enable) {
      return async.async(dart.void, (function* setSymbolIconIgnorePlacement() {
        try {
          yield this[_channel].invokeMethod(dart.dynamic, "symbolManager#iconIgnorePlacement", new (T.IdentityMapOfString$dynamic()).from(["iconIgnorePlacement", enable]));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (message_codec.PlatformException.is(e)) {
            return T.FutureOfvoid().error(e);
          } else
            throw e$;
        }
      }).bind(this));
    }
    setSymbolTextAllowOverlap(enable) {
      return async.async(dart.void, (function* setSymbolTextAllowOverlap() {
        try {
          yield this[_channel].invokeMethod(dart.dynamic, "symbolManager#textAllowOverlap", new (T.IdentityMapOfString$dynamic()).from(["textAllowOverlap", enable]));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (message_codec.PlatformException.is(e)) {
            return T.FutureOfvoid().error(e);
          } else
            throw e$;
        }
      }).bind(this));
    }
    setSymbolTextIgnorePlacement(enable) {
      return async.async(dart.void, (function* setSymbolTextIgnorePlacement() {
        try {
          yield this[_channel].invokeMethod(dart.dynamic, "symbolManager#textIgnorePlacement", new (T.IdentityMapOfString$dynamic()).from(["textIgnorePlacement", enable]));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (message_codec.PlatformException.is(e)) {
            return T.FutureOfvoid().error(e);
          } else
            throw e$;
        }
      }).bind(this));
    }
    addImageSource(imageSourceId, bytes, coordinates) {
      return async.async(dart.void, (function* addImageSource() {
        try {
          return yield this[_channel].invokeMethod(dart.void, "style#addImageSource", new (T.IdentityMapOfString$Object()).from(["imageSourceId", imageSourceId, "bytes", bytes, "length", bytes[$length], "coordinates", core.Object.as(coordinates.toList())]));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (message_codec.PlatformException.is(e)) {
            return T.FutureOfvoid().error(e);
          } else
            throw e$;
        }
      }).bind(this));
    }
    toScreenLocation(latLng) {
      return async.async(T.PointOfnum(), (function* toScreenLocation() {
        try {
          let screenPosMap = (yield this[_channel].invokeMethod(dart.dynamic, "map#toScreenLocation", new (T.IdentityMapOfString$dynamic()).from(["latitude", latLng.latitude, "longitude", latLng.longitude])));
          return new (T.PointOfnum()).new(core.num.as(dart.dsend(screenPosMap, '_get', ["x"])), core.num.as(dart.dsend(screenPosMap, '_get', ["y"])));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (message_codec.PlatformException.is(e)) {
            return T.FutureOfPointOfnum().error(e);
          } else
            throw e$;
        }
      }).bind(this));
    }
    toScreenLocationBatch(latLngs) {
      return async.async(T.ListOfPointOfnum(), (function* toScreenLocationBatch() {
        try {
          let coordinates = _native_typed_data.NativeFloat64List.fromList(latLngs[$map](T.ListOfdouble(), dart.fn(e => T.JSArrayOfdouble().of([e.latitude, e.longitude]), T.LatLngToListOfdouble()))[$expand](core.double, dart.fn(e => e, T.ListOfdoubleToListOfdouble()))[$toList]());
          let result = typed_data.Float64List.as(yield this[_channel].invokeMethod(dart.dynamic, "map#toScreenLocationBatch", new (T.IdentityMapOfString$Float64List()).from(["coordinates", coordinates])));
          let points = T.JSArrayOfPointOfnum().of([]);
          for (let i = 0; i < result[$length]; i = i + 2) {
            points[$add](new (T.PointOfnum()).new(result[$_get](i), result[$_get](i + 1)));
          }
          return points;
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (message_codec.PlatformException.is(e)) {
            return T.FutureOfListOfPointOfnum().error(e);
          } else
            throw e$;
        }
      }).bind(this));
    }
    removeImageSource(imageSourceId) {
      return async.async(dart.void, (function* removeImageSource() {
        try {
          return yield this[_channel].invokeMethod(dart.void, "style#removeImageSource", new (T.IdentityMapOfString$Object()).from(["imageSourceId", imageSourceId]));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (message_codec.PlatformException.is(e)) {
            return T.FutureOfvoid().error(e);
          } else
            throw e$;
        }
      }).bind(this));
    }
    addLayer(imageLayerId, imageSourceId) {
      return async.async(dart.void, (function* addLayer() {
        try {
          return yield this[_channel].invokeMethod(dart.void, "style#addLayer", new (T.IdentityMapOfString$Object()).from(["imageLayerId", imageLayerId, "imageSourceId", imageSourceId]));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (message_codec.PlatformException.is(e)) {
            return T.FutureOfvoid().error(e);
          } else
            throw e$;
        }
      }).bind(this));
    }
    addLayerBelow(imageLayerId, imageSourceId, belowLayerId) {
      return async.async(dart.void, (function* addLayerBelow() {
        try {
          return yield this[_channel].invokeMethod(dart.void, "style#addLayerBelow", new (T.IdentityMapOfString$Object()).from(["imageLayerId", imageLayerId, "imageSourceId", imageSourceId, "belowLayerId", belowLayerId]));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (message_codec.PlatformException.is(e)) {
            return T.FutureOfvoid().error(e);
          } else
            throw e$;
        }
      }).bind(this));
    }
    removeLayer(imageLayerId) {
      return async.async(dart.void, (function* removeLayer() {
        try {
          return yield this[_channel].invokeMethod(dart.void, "style#removeLayer", new (T.IdentityMapOfString$Object()).from(["imageLayerId", imageLayerId]));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (message_codec.PlatformException.is(e)) {
            return T.FutureOfvoid().error(e);
          } else
            throw e$;
        }
      }).bind(this));
    }
    toLatLng(screenLocation) {
      return async.async(mapbox_gl_platform_interface.LatLng, (function* toLatLng() {
        try {
          let latLngMap = (yield this[_channel].invokeMethod(dart.dynamic, "map#toLatLng", new (T.IdentityMapOfString$dynamic()).from(["x", screenLocation.x, "y", screenLocation.y])));
          return new mapbox_gl_platform_interface.LatLng.new(core.double.as(dart.dsend(latLngMap, '_get', ["latitude"])), core.double.as(dart.dsend(latLngMap, '_get', ["longitude"])));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (message_codec.PlatformException.is(e)) {
            return T.FutureOfLatLng().error(e);
          } else
            throw e$;
        }
      }).bind(this));
    }
    getMetersPerPixelAtLatitude(latitude) {
      return async.async(core.double, (function* getMetersPerPixelAtLatitude() {
        try {
          let latLngMap = (yield this[_channel].invokeMethod(dart.dynamic, "map#getMetersPerPixelAtLatitude", new (T.IdentityMapOfString$dynamic()).from(["latitude", latitude])));
          return T.FutureOrOfdouble().as(dart.dsend(latLngMap, '_get', ["metersperpixel"]));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (message_codec.PlatformException.is(e)) {
            return T.FutureOfdouble().error(e);
          } else
            throw e$;
        }
      }).bind(this));
    }
  };
  (mapbox_gl_platform_interface.MethodChannelMapboxGl.new = function() {
    this[__MethodChannelMapboxGl__channel] = null;
    mapbox_gl_platform_interface.MethodChannelMapboxGl.__proto__.new.call(this);
    ;
  }).prototype = mapbox_gl_platform_interface.MethodChannelMapboxGl.prototype;
  dart.addTypeTests(mapbox_gl_platform_interface.MethodChannelMapboxGl);
  dart.addTypeCaches(mapbox_gl_platform_interface.MethodChannelMapboxGl);
  dart.setMethodSignature(mapbox_gl_platform_interface.MethodChannelMapboxGl, () => ({
    __proto__: dart.getMethods(mapbox_gl_platform_interface.MethodChannelMapboxGl.__proto__),
    [_handleMethodCall]: dart.fnType(async.Future, [message_codec.MethodCall]),
    requestMyLocationLatLng: dart.fnType(async.Future$(mapbox_gl_platform_interface.LatLng), [])
  }));
  dart.setGetterSignature(mapbox_gl_platform_interface.MethodChannelMapboxGl, () => ({
    __proto__: dart.getGetters(mapbox_gl_platform_interface.MethodChannelMapboxGl.__proto__),
    [_channel]: platform_channel.MethodChannel
  }));
  dart.setSetterSignature(mapbox_gl_platform_interface.MethodChannelMapboxGl, () => ({
    __proto__: dart.getSetters(mapbox_gl_platform_interface.MethodChannelMapboxGl.__proto__),
    [_channel]: platform_channel.MethodChannel
  }));
  dart.setLibraryUri(mapbox_gl_platform_interface.MethodChannelMapboxGl, I[0]);
  dart.setFieldSignature(mapbox_gl_platform_interface.MethodChannelMapboxGl, () => ({
    __proto__: dart.getFields(mapbox_gl_platform_interface.MethodChannelMapboxGl.__proto__),
    [__MethodChannelMapboxGl__channel]: dart.fieldType(dart.nullable(platform_channel.MethodChannel))
  }));
  var options$1 = dart.privateName(mapbox_gl_platform_interface, "Symbol.options");
  mapbox_gl_platform_interface.Symbol = class Symbol extends core.Object {
    get options() {
      return this[options$1];
    }
    set options(value) {
      this[options$1] = value;
    }
    get id() {
      return this[_id$];
    }
    get data() {
      return this[_data$];
    }
  };
  (mapbox_gl_platform_interface.Symbol.new = function(_id, options, _data = null) {
    this[_id$] = _id;
    this[options$1] = options;
    this[_data$] = _data;
    ;
  }).prototype = mapbox_gl_platform_interface.Symbol.prototype;
  dart.addTypeTests(mapbox_gl_platform_interface.Symbol);
  dart.addTypeCaches(mapbox_gl_platform_interface.Symbol);
  dart.setGetterSignature(mapbox_gl_platform_interface.Symbol, () => ({
    __proto__: dart.getGetters(mapbox_gl_platform_interface.Symbol.__proto__),
    id: core.String,
    data: dart.nullable(core.Map)
  }));
  dart.setLibraryUri(mapbox_gl_platform_interface.Symbol, I[0]);
  dart.setFieldSignature(mapbox_gl_platform_interface.Symbol, () => ({
    __proto__: dart.getFields(mapbox_gl_platform_interface.Symbol.__proto__),
    [_id$]: dart.finalFieldType(core.String),
    [_data$]: dart.finalFieldType(dart.nullable(core.Map)),
    options: dart.fieldType(mapbox_gl_platform_interface.SymbolOptions)
  }));
  var iconSize$ = dart.privateName(mapbox_gl_platform_interface, "SymbolOptions.iconSize");
  var iconImage$ = dart.privateName(mapbox_gl_platform_interface, "SymbolOptions.iconImage");
  var iconRotate$ = dart.privateName(mapbox_gl_platform_interface, "SymbolOptions.iconRotate");
  var iconOffset$ = dart.privateName(mapbox_gl_platform_interface, "SymbolOptions.iconOffset");
  var iconAnchor$ = dart.privateName(mapbox_gl_platform_interface, "SymbolOptions.iconAnchor");
  var fontNames$ = dart.privateName(mapbox_gl_platform_interface, "SymbolOptions.fontNames");
  var textField$ = dart.privateName(mapbox_gl_platform_interface, "SymbolOptions.textField");
  var textSize$ = dart.privateName(mapbox_gl_platform_interface, "SymbolOptions.textSize");
  var textMaxWidth$ = dart.privateName(mapbox_gl_platform_interface, "SymbolOptions.textMaxWidth");
  var textLetterSpacing$ = dart.privateName(mapbox_gl_platform_interface, "SymbolOptions.textLetterSpacing");
  var textJustify$ = dart.privateName(mapbox_gl_platform_interface, "SymbolOptions.textJustify");
  var textAnchor$ = dart.privateName(mapbox_gl_platform_interface, "SymbolOptions.textAnchor");
  var textRotate$ = dart.privateName(mapbox_gl_platform_interface, "SymbolOptions.textRotate");
  var textTransform$ = dart.privateName(mapbox_gl_platform_interface, "SymbolOptions.textTransform");
  var textOffset$ = dart.privateName(mapbox_gl_platform_interface, "SymbolOptions.textOffset");
  var iconOpacity$ = dart.privateName(mapbox_gl_platform_interface, "SymbolOptions.iconOpacity");
  var iconColor$ = dart.privateName(mapbox_gl_platform_interface, "SymbolOptions.iconColor");
  var iconHaloColor$ = dart.privateName(mapbox_gl_platform_interface, "SymbolOptions.iconHaloColor");
  var iconHaloWidth$ = dart.privateName(mapbox_gl_platform_interface, "SymbolOptions.iconHaloWidth");
  var iconHaloBlur$ = dart.privateName(mapbox_gl_platform_interface, "SymbolOptions.iconHaloBlur");
  var textOpacity$ = dart.privateName(mapbox_gl_platform_interface, "SymbolOptions.textOpacity");
  var textColor$ = dart.privateName(mapbox_gl_platform_interface, "SymbolOptions.textColor");
  var textHaloColor$ = dart.privateName(mapbox_gl_platform_interface, "SymbolOptions.textHaloColor");
  var textHaloWidth$ = dart.privateName(mapbox_gl_platform_interface, "SymbolOptions.textHaloWidth");
  var textHaloBlur$ = dart.privateName(mapbox_gl_platform_interface, "SymbolOptions.textHaloBlur");
  var geometry$1 = dart.privateName(mapbox_gl_platform_interface, "SymbolOptions.geometry");
  var zIndex$ = dart.privateName(mapbox_gl_platform_interface, "SymbolOptions.zIndex");
  var draggable$1 = dart.privateName(mapbox_gl_platform_interface, "SymbolOptions.draggable");
  mapbox_gl_platform_interface.SymbolOptions = class SymbolOptions extends core.Object {
    get iconSize() {
      return this[iconSize$];
    }
    set iconSize(value) {
      super.iconSize = value;
    }
    get iconImage() {
      return this[iconImage$];
    }
    set iconImage(value) {
      super.iconImage = value;
    }
    get iconRotate() {
      return this[iconRotate$];
    }
    set iconRotate(value) {
      super.iconRotate = value;
    }
    get iconOffset() {
      return this[iconOffset$];
    }
    set iconOffset(value) {
      super.iconOffset = value;
    }
    get iconAnchor() {
      return this[iconAnchor$];
    }
    set iconAnchor(value) {
      super.iconAnchor = value;
    }
    get fontNames() {
      return this[fontNames$];
    }
    set fontNames(value) {
      super.fontNames = value;
    }
    get textField() {
      return this[textField$];
    }
    set textField(value) {
      super.textField = value;
    }
    get textSize() {
      return this[textSize$];
    }
    set textSize(value) {
      super.textSize = value;
    }
    get textMaxWidth() {
      return this[textMaxWidth$];
    }
    set textMaxWidth(value) {
      super.textMaxWidth = value;
    }
    get textLetterSpacing() {
      return this[textLetterSpacing$];
    }
    set textLetterSpacing(value) {
      super.textLetterSpacing = value;
    }
    get textJustify() {
      return this[textJustify$];
    }
    set textJustify(value) {
      super.textJustify = value;
    }
    get textAnchor() {
      return this[textAnchor$];
    }
    set textAnchor(value) {
      super.textAnchor = value;
    }
    get textRotate() {
      return this[textRotate$];
    }
    set textRotate(value) {
      super.textRotate = value;
    }
    get textTransform() {
      return this[textTransform$];
    }
    set textTransform(value) {
      super.textTransform = value;
    }
    get textOffset() {
      return this[textOffset$];
    }
    set textOffset(value) {
      super.textOffset = value;
    }
    get iconOpacity() {
      return this[iconOpacity$];
    }
    set iconOpacity(value) {
      super.iconOpacity = value;
    }
    get iconColor() {
      return this[iconColor$];
    }
    set iconColor(value) {
      super.iconColor = value;
    }
    get iconHaloColor() {
      return this[iconHaloColor$];
    }
    set iconHaloColor(value) {
      super.iconHaloColor = value;
    }
    get iconHaloWidth() {
      return this[iconHaloWidth$];
    }
    set iconHaloWidth(value) {
      super.iconHaloWidth = value;
    }
    get iconHaloBlur() {
      return this[iconHaloBlur$];
    }
    set iconHaloBlur(value) {
      super.iconHaloBlur = value;
    }
    get textOpacity() {
      return this[textOpacity$];
    }
    set textOpacity(value) {
      super.textOpacity = value;
    }
    get textColor() {
      return this[textColor$];
    }
    set textColor(value) {
      super.textColor = value;
    }
    get textHaloColor() {
      return this[textHaloColor$];
    }
    set textHaloColor(value) {
      super.textHaloColor = value;
    }
    get textHaloWidth() {
      return this[textHaloWidth$];
    }
    set textHaloWidth(value) {
      super.textHaloWidth = value;
    }
    get textHaloBlur() {
      return this[textHaloBlur$];
    }
    set textHaloBlur(value) {
      super.textHaloBlur = value;
    }
    get geometry() {
      return this[geometry$1];
    }
    set geometry(value) {
      super.geometry = value;
    }
    get zIndex() {
      return this[zIndex$];
    }
    set zIndex(value) {
      super.zIndex = value;
    }
    get draggable() {
      return this[draggable$1];
    }
    set draggable(value) {
      super.draggable = value;
    }
    copyWith(changes) {
      let t20, t20$, t20$0, t20$1, t20$2, t20$3, t20$4, t20$5, t20$6, t20$7, t20$8, t20$9, t20$10, t20$11, t20$12, t20$13, t20$14, t20$15, t20$16, t20$17, t20$18, t20$19, t20$20, t20$21, t20$22, t20$23, t20$24, t20$25;
      return new mapbox_gl_platform_interface.SymbolOptions.new({iconSize: (t20 = changes.iconSize, t20 == null ? this.iconSize : t20), iconImage: (t20$ = changes.iconImage, t20$ == null ? this.iconImage : t20$), iconRotate: (t20$0 = changes.iconRotate, t20$0 == null ? this.iconRotate : t20$0), iconOffset: (t20$1 = changes.iconOffset, t20$1 == null ? this.iconOffset : t20$1), iconAnchor: (t20$2 = changes.iconAnchor, t20$2 == null ? this.iconAnchor : t20$2), fontNames: (t20$3 = changes.fontNames, t20$3 == null ? this.fontNames : t20$3), textField: (t20$4 = changes.textField, t20$4 == null ? this.textField : t20$4), textSize: (t20$5 = changes.textSize, t20$5 == null ? this.textSize : t20$5), textMaxWidth: (t20$6 = changes.textMaxWidth, t20$6 == null ? this.textMaxWidth : t20$6), textLetterSpacing: (t20$7 = changes.textLetterSpacing, t20$7 == null ? this.textLetterSpacing : t20$7), textJustify: (t20$8 = changes.textJustify, t20$8 == null ? this.textJustify : t20$8), textAnchor: (t20$9 = changes.textAnchor, t20$9 == null ? this.textAnchor : t20$9), textRotate: (t20$10 = changes.textRotate, t20$10 == null ? this.textRotate : t20$10), textTransform: (t20$11 = changes.textTransform, t20$11 == null ? this.textTransform : t20$11), textOffset: (t20$12 = changes.textOffset, t20$12 == null ? this.textOffset : t20$12), iconOpacity: (t20$13 = changes.iconOpacity, t20$13 == null ? this.iconOpacity : t20$13), iconColor: (t20$14 = changes.iconColor, t20$14 == null ? this.iconColor : t20$14), iconHaloColor: (t20$15 = changes.iconHaloColor, t20$15 == null ? this.iconHaloColor : t20$15), iconHaloWidth: (t20$16 = changes.iconHaloWidth, t20$16 == null ? this.iconHaloWidth : t20$16), iconHaloBlur: (t20$17 = changes.iconHaloBlur, t20$17 == null ? this.iconHaloBlur : t20$17), textOpacity: (t20$18 = changes.textOpacity, t20$18 == null ? this.textOpacity : t20$18), textColor: (t20$19 = changes.textColor, t20$19 == null ? this.textColor : t20$19), textHaloColor: (t20$20 = changes.textHaloColor, t20$20 == null ? this.textHaloColor : t20$20), textHaloWidth: (t20$21 = changes.textHaloWidth, t20$21 == null ? this.textHaloWidth : t20$21), textHaloBlur: (t20$22 = changes.textHaloBlur, t20$22 == null ? this.textHaloBlur : t20$22), geometry: (t20$23 = changes.geometry, t20$23 == null ? this.geometry : t20$23), zIndex: (t20$24 = changes.zIndex, t20$24 == null ? this.zIndex : t20$24), draggable: (t20$25 = changes.draggable, t20$25 == null ? this.draggable : t20$25)});
    }
    toJson() {
      let t20;
      let json = new (T.IdentityMapOfString$dynamic()).new();
      function addIfPresent(fieldName, value) {
        if (value != null) {
          json[$_set](fieldName, value);
        }
      }
      dart.fn(addIfPresent, T.StringAnddynamicTovoid());
      addIfPresent("iconSize", this.iconSize);
      addIfPresent("iconImage", this.iconImage);
      addIfPresent("iconRotate", this.iconRotate);
      addIfPresent("iconOffset", mapbox_gl_platform_interface._offsetToJson(this.iconOffset));
      addIfPresent("iconAnchor", this.iconAnchor);
      addIfPresent("fontNames", this.fontNames);
      addIfPresent("textField", this.textField);
      addIfPresent("textSize", this.textSize);
      addIfPresent("textMaxWidth", this.textMaxWidth);
      addIfPresent("textLetterSpacing", this.textLetterSpacing);
      addIfPresent("textJustify", this.textJustify);
      addIfPresent("textAnchor", this.textAnchor);
      addIfPresent("textRotate", this.textRotate);
      addIfPresent("textTransform", this.textTransform);
      addIfPresent("textOffset", mapbox_gl_platform_interface._offsetToJson(this.textOffset));
      addIfPresent("iconOpacity", this.iconOpacity);
      addIfPresent("iconColor", this.iconColor);
      addIfPresent("iconHaloColor", this.iconHaloColor);
      addIfPresent("iconHaloWidth", this.iconHaloWidth);
      addIfPresent("iconHaloBlur", this.iconHaloBlur);
      addIfPresent("textOpacity", this.textOpacity);
      addIfPresent("textColor", this.textColor);
      addIfPresent("textHaloColor", this.textHaloColor);
      addIfPresent("textHaloWidth", this.textHaloWidth);
      addIfPresent("textHaloBlur", this.textHaloBlur);
      addIfPresent("geometry", (t20 = this.geometry, t20 == null ? null : t20.toJson()));
      addIfPresent("zIndex", this.zIndex);
      addIfPresent("draggable", this.draggable);
      return json;
    }
  };
  (mapbox_gl_platform_interface.SymbolOptions.new = function(opts) {
    let iconSize = opts && 'iconSize' in opts ? opts.iconSize : null;
    let iconImage = opts && 'iconImage' in opts ? opts.iconImage : null;
    let iconRotate = opts && 'iconRotate' in opts ? opts.iconRotate : null;
    let iconOffset = opts && 'iconOffset' in opts ? opts.iconOffset : null;
    let iconAnchor = opts && 'iconAnchor' in opts ? opts.iconAnchor : null;
    let fontNames = opts && 'fontNames' in opts ? opts.fontNames : null;
    let textField = opts && 'textField' in opts ? opts.textField : null;
    let textSize = opts && 'textSize' in opts ? opts.textSize : null;
    let textMaxWidth = opts && 'textMaxWidth' in opts ? opts.textMaxWidth : null;
    let textLetterSpacing = opts && 'textLetterSpacing' in opts ? opts.textLetterSpacing : null;
    let textJustify = opts && 'textJustify' in opts ? opts.textJustify : null;
    let textAnchor = opts && 'textAnchor' in opts ? opts.textAnchor : null;
    let textRotate = opts && 'textRotate' in opts ? opts.textRotate : null;
    let textTransform = opts && 'textTransform' in opts ? opts.textTransform : null;
    let textOffset = opts && 'textOffset' in opts ? opts.textOffset : null;
    let iconOpacity = opts && 'iconOpacity' in opts ? opts.iconOpacity : null;
    let iconColor = opts && 'iconColor' in opts ? opts.iconColor : null;
    let iconHaloColor = opts && 'iconHaloColor' in opts ? opts.iconHaloColor : null;
    let iconHaloWidth = opts && 'iconHaloWidth' in opts ? opts.iconHaloWidth : null;
    let iconHaloBlur = opts && 'iconHaloBlur' in opts ? opts.iconHaloBlur : null;
    let textOpacity = opts && 'textOpacity' in opts ? opts.textOpacity : null;
    let textColor = opts && 'textColor' in opts ? opts.textColor : null;
    let textHaloColor = opts && 'textHaloColor' in opts ? opts.textHaloColor : null;
    let textHaloWidth = opts && 'textHaloWidth' in opts ? opts.textHaloWidth : null;
    let textHaloBlur = opts && 'textHaloBlur' in opts ? opts.textHaloBlur : null;
    let geometry = opts && 'geometry' in opts ? opts.geometry : null;
    let zIndex = opts && 'zIndex' in opts ? opts.zIndex : null;
    let draggable = opts && 'draggable' in opts ? opts.draggable : null;
    this[iconSize$] = iconSize;
    this[iconImage$] = iconImage;
    this[iconRotate$] = iconRotate;
    this[iconOffset$] = iconOffset;
    this[iconAnchor$] = iconAnchor;
    this[fontNames$] = fontNames;
    this[textField$] = textField;
    this[textSize$] = textSize;
    this[textMaxWidth$] = textMaxWidth;
    this[textLetterSpacing$] = textLetterSpacing;
    this[textJustify$] = textJustify;
    this[textAnchor$] = textAnchor;
    this[textRotate$] = textRotate;
    this[textTransform$] = textTransform;
    this[textOffset$] = textOffset;
    this[iconOpacity$] = iconOpacity;
    this[iconColor$] = iconColor;
    this[iconHaloColor$] = iconHaloColor;
    this[iconHaloWidth$] = iconHaloWidth;
    this[iconHaloBlur$] = iconHaloBlur;
    this[textOpacity$] = textOpacity;
    this[textColor$] = textColor;
    this[textHaloColor$] = textHaloColor;
    this[textHaloWidth$] = textHaloWidth;
    this[textHaloBlur$] = textHaloBlur;
    this[geometry$1] = geometry;
    this[zIndex$] = zIndex;
    this[draggable$1] = draggable;
    ;
  }).prototype = mapbox_gl_platform_interface.SymbolOptions.prototype;
  dart.addTypeTests(mapbox_gl_platform_interface.SymbolOptions);
  dart.addTypeCaches(mapbox_gl_platform_interface.SymbolOptions);
  dart.setMethodSignature(mapbox_gl_platform_interface.SymbolOptions, () => ({
    __proto__: dart.getMethods(mapbox_gl_platform_interface.SymbolOptions.__proto__),
    copyWith: dart.fnType(mapbox_gl_platform_interface.SymbolOptions, [mapbox_gl_platform_interface.SymbolOptions]),
    toJson: dart.fnType(dart.dynamic, [])
  }));
  dart.setLibraryUri(mapbox_gl_platform_interface.SymbolOptions, I[0]);
  dart.setFieldSignature(mapbox_gl_platform_interface.SymbolOptions, () => ({
    __proto__: dart.getFields(mapbox_gl_platform_interface.SymbolOptions.__proto__),
    iconSize: dart.finalFieldType(dart.nullable(core.double)),
    iconImage: dart.finalFieldType(dart.nullable(core.String)),
    iconRotate: dart.finalFieldType(dart.nullable(core.double)),
    iconOffset: dart.finalFieldType(dart.nullable(ui.Offset)),
    iconAnchor: dart.finalFieldType(dart.nullable(core.String)),
    fontNames: dart.finalFieldType(dart.nullable(core.List$(core.String))),
    textField: dart.finalFieldType(dart.nullable(core.String)),
    textSize: dart.finalFieldType(dart.nullable(core.double)),
    textMaxWidth: dart.finalFieldType(dart.nullable(core.double)),
    textLetterSpacing: dart.finalFieldType(dart.nullable(core.double)),
    textJustify: dart.finalFieldType(dart.nullable(core.String)),
    textAnchor: dart.finalFieldType(dart.nullable(core.String)),
    textRotate: dart.finalFieldType(dart.nullable(core.double)),
    textTransform: dart.finalFieldType(dart.nullable(core.String)),
    textOffset: dart.finalFieldType(dart.nullable(ui.Offset)),
    iconOpacity: dart.finalFieldType(dart.nullable(core.double)),
    iconColor: dart.finalFieldType(dart.nullable(core.String)),
    iconHaloColor: dart.finalFieldType(dart.nullable(core.String)),
    iconHaloWidth: dart.finalFieldType(dart.nullable(core.double)),
    iconHaloBlur: dart.finalFieldType(dart.nullable(core.double)),
    textOpacity: dart.finalFieldType(dart.nullable(core.double)),
    textColor: dart.finalFieldType(dart.nullable(core.String)),
    textHaloColor: dart.finalFieldType(dart.nullable(core.String)),
    textHaloWidth: dart.finalFieldType(dart.nullable(core.double)),
    textHaloBlur: dart.finalFieldType(dart.nullable(core.double)),
    geometry: dart.finalFieldType(dart.nullable(mapbox_gl_platform_interface.LatLng)),
    zIndex: dart.finalFieldType(dart.nullable(core.int)),
    draggable: dart.finalFieldType(dart.nullable(core.bool))
  }));
  dart.defineLazy(mapbox_gl_platform_interface.SymbolOptions, {
    /*mapbox_gl_platform_interface.SymbolOptions.defaultOptions*/get defaultOptions() {
      return C[20] || CT.C20;
    }
  }, false);
  var options$2 = dart.privateName(mapbox_gl_platform_interface, "Fill.options");
  mapbox_gl_platform_interface.Fill = class Fill extends core.Object {
    get options() {
      return this[options$2];
    }
    set options(value) {
      this[options$2] = value;
    }
    get id() {
      return this[_id$];
    }
    get data() {
      return this[_data$];
    }
  };
  (mapbox_gl_platform_interface.Fill.new = function(_id, options, _data = null) {
    this[_id$] = _id;
    this[options$2] = options;
    this[_data$] = _data;
    ;
  }).prototype = mapbox_gl_platform_interface.Fill.prototype;
  dart.addTypeTests(mapbox_gl_platform_interface.Fill);
  dart.addTypeCaches(mapbox_gl_platform_interface.Fill);
  dart.setGetterSignature(mapbox_gl_platform_interface.Fill, () => ({
    __proto__: dart.getGetters(mapbox_gl_platform_interface.Fill.__proto__),
    id: core.String,
    data: dart.nullable(core.Map)
  }));
  dart.setLibraryUri(mapbox_gl_platform_interface.Fill, I[0]);
  dart.setFieldSignature(mapbox_gl_platform_interface.Fill, () => ({
    __proto__: dart.getFields(mapbox_gl_platform_interface.Fill.__proto__),
    [_id$]: dart.finalFieldType(core.String),
    [_data$]: dart.finalFieldType(dart.nullable(core.Map)),
    options: dart.fieldType(mapbox_gl_platform_interface.FillOptions)
  }));
  var fillOpacity$ = dart.privateName(mapbox_gl_platform_interface, "FillOptions.fillOpacity");
  var fillColor$ = dart.privateName(mapbox_gl_platform_interface, "FillOptions.fillColor");
  var fillOutlineColor$ = dart.privateName(mapbox_gl_platform_interface, "FillOptions.fillOutlineColor");
  var fillPattern$ = dart.privateName(mapbox_gl_platform_interface, "FillOptions.fillPattern");
  var geometry$2 = dart.privateName(mapbox_gl_platform_interface, "FillOptions.geometry");
  var draggable$2 = dart.privateName(mapbox_gl_platform_interface, "FillOptions.draggable");
  mapbox_gl_platform_interface.FillOptions = class FillOptions extends core.Object {
    get fillOpacity() {
      return this[fillOpacity$];
    }
    set fillOpacity(value) {
      super.fillOpacity = value;
    }
    get fillColor() {
      return this[fillColor$];
    }
    set fillColor(value) {
      super.fillColor = value;
    }
    get fillOutlineColor() {
      return this[fillOutlineColor$];
    }
    set fillOutlineColor(value) {
      super.fillOutlineColor = value;
    }
    get fillPattern() {
      return this[fillPattern$];
    }
    set fillPattern(value) {
      super.fillPattern = value;
    }
    get geometry() {
      return this[geometry$2];
    }
    set geometry(value) {
      super.geometry = value;
    }
    get draggable() {
      return this[draggable$2];
    }
    set draggable(value) {
      super.draggable = value;
    }
    copyWith(changes) {
      let t20, t20$, t20$0, t20$1, t20$2, t20$3;
      return new mapbox_gl_platform_interface.FillOptions.new({fillOpacity: (t20 = changes.fillOpacity, t20 == null ? this.fillOpacity : t20), fillColor: (t20$ = changes.fillColor, t20$ == null ? this.fillColor : t20$), fillOutlineColor: (t20$0 = changes.fillOutlineColor, t20$0 == null ? this.fillOutlineColor : t20$0), fillPattern: (t20$1 = changes.fillPattern, t20$1 == null ? this.fillPattern : t20$1), geometry: (t20$2 = changes.geometry, t20$2 == null ? this.geometry : t20$2), draggable: (t20$3 = changes.draggable, t20$3 == null ? this.draggable : t20$3)});
    }
    toJson() {
      let t20;
      let json = new (T.IdentityMapOfString$dynamic()).new();
      function addIfPresent(fieldName, value) {
        if (value != null) {
          json[$_set](fieldName, value);
        }
      }
      dart.fn(addIfPresent, T.StringAnddynamicTovoid());
      addIfPresent("fillOpacity", this.fillOpacity);
      addIfPresent("fillColor", this.fillColor);
      addIfPresent("fillOutlineColor", this.fillOutlineColor);
      addIfPresent("fillPattern", this.fillPattern);
      addIfPresent("geometry", (t20 = this.geometry, t20 == null ? null : t20[$map](core.List, dart.fn(latLngList => latLngList[$map](dart.dynamic, dart.fn(latLng => latLng.toJson(), T.LatLngTodynamic()))[$toList](), T.ListOfLatLngToList()))[$toList]()));
      addIfPresent("draggable", this.draggable);
      return json;
    }
  };
  (mapbox_gl_platform_interface.FillOptions.new = function(opts) {
    let fillOpacity = opts && 'fillOpacity' in opts ? opts.fillOpacity : null;
    let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
    let fillOutlineColor = opts && 'fillOutlineColor' in opts ? opts.fillOutlineColor : null;
    let fillPattern = opts && 'fillPattern' in opts ? opts.fillPattern : null;
    let geometry = opts && 'geometry' in opts ? opts.geometry : null;
    let draggable = opts && 'draggable' in opts ? opts.draggable : null;
    this[fillOpacity$] = fillOpacity;
    this[fillColor$] = fillColor;
    this[fillOutlineColor$] = fillOutlineColor;
    this[fillPattern$] = fillPattern;
    this[geometry$2] = geometry;
    this[draggable$2] = draggable;
    ;
  }).prototype = mapbox_gl_platform_interface.FillOptions.prototype;
  dart.addTypeTests(mapbox_gl_platform_interface.FillOptions);
  dart.addTypeCaches(mapbox_gl_platform_interface.FillOptions);
  dart.setMethodSignature(mapbox_gl_platform_interface.FillOptions, () => ({
    __proto__: dart.getMethods(mapbox_gl_platform_interface.FillOptions.__proto__),
    copyWith: dart.fnType(mapbox_gl_platform_interface.FillOptions, [mapbox_gl_platform_interface.FillOptions]),
    toJson: dart.fnType(dart.dynamic, [])
  }));
  dart.setLibraryUri(mapbox_gl_platform_interface.FillOptions, I[0]);
  dart.setFieldSignature(mapbox_gl_platform_interface.FillOptions, () => ({
    __proto__: dart.getFields(mapbox_gl_platform_interface.FillOptions.__proto__),
    fillOpacity: dart.finalFieldType(dart.nullable(core.double)),
    fillColor: dart.finalFieldType(dart.nullable(core.String)),
    fillOutlineColor: dart.finalFieldType(dart.nullable(core.String)),
    fillPattern: dart.finalFieldType(dart.nullable(core.String)),
    geometry: dart.finalFieldType(dart.nullable(core.List$(core.List$(mapbox_gl_platform_interface.LatLng)))),
    draggable: dart.finalFieldType(dart.nullable(core.bool))
  }));
  dart.defineLazy(mapbox_gl_platform_interface.FillOptions, {
    /*mapbox_gl_platform_interface.FillOptions.defaultOptions*/get defaultOptions() {
      return C[21] || CT.C21;
    }
  }, false);
  mapbox_gl_platform_interface.MapboxStyles = class MapboxStyles extends core.Object {};
  (mapbox_gl_platform_interface.MapboxStyles.new = function() {
    ;
  }).prototype = mapbox_gl_platform_interface.MapboxStyles.prototype;
  dart.addTypeTests(mapbox_gl_platform_interface.MapboxStyles);
  dart.addTypeCaches(mapbox_gl_platform_interface.MapboxStyles);
  dart.setLibraryUri(mapbox_gl_platform_interface.MapboxStyles, I[0]);
  dart.defineLazy(mapbox_gl_platform_interface.MapboxStyles, {
    /*mapbox_gl_platform_interface.MapboxStyles.MAPBOX_STREETS*/get MAPBOX_STREETS() {
      return "mapbox://styles/mapbox/streets-v11";
    },
    /*mapbox_gl_platform_interface.MapboxStyles.OUTDOORS*/get OUTDOORS() {
      return "mapbox://styles/mapbox/outdoors-v11";
    },
    /*mapbox_gl_platform_interface.MapboxStyles.LIGHT*/get LIGHT() {
      return "mapbox://styles/mapbox/light-v10";
    },
    /*mapbox_gl_platform_interface.MapboxStyles.DARK*/get DARK() {
      return "mapbox://styles/mapbox/dark-v10";
    },
    /*mapbox_gl_platform_interface.MapboxStyles.SATELLITE*/get SATELLITE() {
      return "mapbox://styles/mapbox/satellite-v9";
    },
    /*mapbox_gl_platform_interface.MapboxStyles.SATELLITE_STREETS*/get SATELLITE_STREETS() {
      return "mapbox://styles/mapbox/satellite-streets-v11";
    },
    /*mapbox_gl_platform_interface.MapboxStyles.TRAFFIC_DAY*/get TRAFFIC_DAY() {
      return "mapbox://styles/mapbox/traffic-day-v2";
    },
    /*mapbox_gl_platform_interface.MapboxStyles.TRAFFIC_NIGHT*/get TRAFFIC_NIGHT() {
      return "mapbox://styles/mapbox/traffic-night-v2";
    }
  }, false);
  var _name$ = dart.privateName(mapbox_gl_platform_interface, "_name");
  mapbox_gl_platform_interface.MyLocationTrackingMode = class MyLocationTrackingMode extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (mapbox_gl_platform_interface.MyLocationTrackingMode.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = mapbox_gl_platform_interface.MyLocationTrackingMode.prototype;
  dart.addTypeTests(mapbox_gl_platform_interface.MyLocationTrackingMode);
  dart.addTypeCaches(mapbox_gl_platform_interface.MyLocationTrackingMode);
  dart.setLibraryUri(mapbox_gl_platform_interface.MyLocationTrackingMode, I[0]);
  dart.setFieldSignature(mapbox_gl_platform_interface.MyLocationTrackingMode, () => ({
    __proto__: dart.getFields(mapbox_gl_platform_interface.MyLocationTrackingMode.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(mapbox_gl_platform_interface.MyLocationTrackingMode, ['toString']);
  mapbox_gl_platform_interface.MyLocationTrackingMode.None = C[22] || CT.C22;
  mapbox_gl_platform_interface.MyLocationTrackingMode.Tracking = C[23] || CT.C23;
  mapbox_gl_platform_interface.MyLocationTrackingMode.TrackingCompass = C[24] || CT.C24;
  mapbox_gl_platform_interface.MyLocationTrackingMode.TrackingGPS = C[25] || CT.C25;
  mapbox_gl_platform_interface.MyLocationTrackingMode.values = C[26] || CT.C26;
  mapbox_gl_platform_interface.MyLocationRenderMode = class MyLocationRenderMode extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (mapbox_gl_platform_interface.MyLocationRenderMode.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = mapbox_gl_platform_interface.MyLocationRenderMode.prototype;
  dart.addTypeTests(mapbox_gl_platform_interface.MyLocationRenderMode);
  dart.addTypeCaches(mapbox_gl_platform_interface.MyLocationRenderMode);
  dart.setLibraryUri(mapbox_gl_platform_interface.MyLocationRenderMode, I[0]);
  dart.setFieldSignature(mapbox_gl_platform_interface.MyLocationRenderMode, () => ({
    __proto__: dart.getFields(mapbox_gl_platform_interface.MyLocationRenderMode.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(mapbox_gl_platform_interface.MyLocationRenderMode, ['toString']);
  mapbox_gl_platform_interface.MyLocationRenderMode.NORMAL = C[27] || CT.C27;
  mapbox_gl_platform_interface.MyLocationRenderMode.COMPASS = C[28] || CT.C28;
  mapbox_gl_platform_interface.MyLocationRenderMode.GPS = C[29] || CT.C29;
  mapbox_gl_platform_interface.MyLocationRenderMode.values = C[30] || CT.C30;
  mapbox_gl_platform_interface.CompassViewPosition = class CompassViewPosition extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (mapbox_gl_platform_interface.CompassViewPosition.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = mapbox_gl_platform_interface.CompassViewPosition.prototype;
  dart.addTypeTests(mapbox_gl_platform_interface.CompassViewPosition);
  dart.addTypeCaches(mapbox_gl_platform_interface.CompassViewPosition);
  dart.setLibraryUri(mapbox_gl_platform_interface.CompassViewPosition, I[0]);
  dart.setFieldSignature(mapbox_gl_platform_interface.CompassViewPosition, () => ({
    __proto__: dart.getFields(mapbox_gl_platform_interface.CompassViewPosition.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(mapbox_gl_platform_interface.CompassViewPosition, ['toString']);
  mapbox_gl_platform_interface.CompassViewPosition.TopLeft = C[31] || CT.C31;
  mapbox_gl_platform_interface.CompassViewPosition.TopRight = C[32] || CT.C32;
  mapbox_gl_platform_interface.CompassViewPosition.BottomLeft = C[33] || CT.C33;
  mapbox_gl_platform_interface.CompassViewPosition.BottomRight = C[34] || CT.C34;
  mapbox_gl_platform_interface.CompassViewPosition.values = C[35] || CT.C35;
  var bounds$ = dart.privateName(mapbox_gl_platform_interface, "CameraTargetBounds.bounds");
  mapbox_gl_platform_interface.CameraTargetBounds = class CameraTargetBounds extends core.Object {
    get bounds() {
      return this[bounds$];
    }
    set bounds(value) {
      super.bounds = value;
    }
    toJson() {
      let t20;
      return [(t20 = this.bounds, t20 == null ? null : t20.toList())];
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!this[$runtimeType]._equals(dart.runtimeType(other))) return false;
      let typedOther = mapbox_gl_platform_interface.CameraTargetBounds.as(other);
      return dart.equals(this.bounds, typedOther.bounds);
    }
    get hashCode() {
      return dart.hashCode(this.bounds);
    }
    toString() {
      return "CameraTargetBounds(bounds: " + dart.str(this.bounds) + ")";
    }
  };
  (mapbox_gl_platform_interface.CameraTargetBounds.new = function(bounds) {
    this[bounds$] = bounds;
    ;
  }).prototype = mapbox_gl_platform_interface.CameraTargetBounds.prototype;
  dart.addTypeTests(mapbox_gl_platform_interface.CameraTargetBounds);
  dart.addTypeCaches(mapbox_gl_platform_interface.CameraTargetBounds);
  dart.setMethodSignature(mapbox_gl_platform_interface.CameraTargetBounds, () => ({
    __proto__: dart.getMethods(mapbox_gl_platform_interface.CameraTargetBounds.__proto__),
    toJson: dart.fnType(dart.dynamic, []),
    _equals: dart.fnType(core.bool, [dart.dynamic]),
    [$_equals]: dart.fnType(core.bool, [dart.dynamic])
  }));
  dart.setLibraryUri(mapbox_gl_platform_interface.CameraTargetBounds, I[0]);
  dart.setFieldSignature(mapbox_gl_platform_interface.CameraTargetBounds, () => ({
    __proto__: dart.getFields(mapbox_gl_platform_interface.CameraTargetBounds.__proto__),
    bounds: dart.finalFieldType(dart.nullable(mapbox_gl_platform_interface.LatLngBounds))
  }));
  dart.defineExtensionMethods(mapbox_gl_platform_interface.CameraTargetBounds, ['_equals', 'toString']);
  dart.defineExtensionAccessors(mapbox_gl_platform_interface.CameraTargetBounds, ['hashCode']);
  dart.defineLazy(mapbox_gl_platform_interface.CameraTargetBounds, {
    /*mapbox_gl_platform_interface.CameraTargetBounds.unbounded*/get unbounded() {
      return C[36] || CT.C36;
    }
  }, false);
  var minZoom$ = dart.privateName(mapbox_gl_platform_interface, "MinMaxZoomPreference.minZoom");
  var maxZoom$ = dart.privateName(mapbox_gl_platform_interface, "MinMaxZoomPreference.maxZoom");
  mapbox_gl_platform_interface.MinMaxZoomPreference = class MinMaxZoomPreference extends core.Object {
    get minZoom() {
      return this[minZoom$];
    }
    set minZoom(value) {
      super.minZoom = value;
    }
    get maxZoom() {
      return this[maxZoom$];
    }
    set maxZoom(value) {
      super.maxZoom = value;
    }
    toJson() {
      return [this.minZoom, this.maxZoom];
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!this[$runtimeType]._equals(dart.runtimeType(other))) return false;
      let typedOther = mapbox_gl_platform_interface.MinMaxZoomPreference.as(other);
      return this.minZoom == typedOther.minZoom && this.maxZoom == typedOther.maxZoom;
    }
    get hashCode() {
      return ui.hashValues(this.minZoom, this.maxZoom);
    }
    toString() {
      return "MinMaxZoomPreference(minZoom: " + dart.str(this.minZoom) + ", maxZoom: " + dart.str(this.maxZoom) + ")";
    }
  };
  (mapbox_gl_platform_interface.MinMaxZoomPreference.new = function(minZoom, maxZoom) {
    this[minZoom$] = minZoom;
    this[maxZoom$] = maxZoom;
    if (!(minZoom == null || maxZoom == null || dart.notNull(minZoom) <= dart.notNull(maxZoom))) dart.assertFailed(null, I[2], 112, 16, "minZoom == null || maxZoom == null || minZoom <= maxZoom");
    ;
  }).prototype = mapbox_gl_platform_interface.MinMaxZoomPreference.prototype;
  dart.addTypeTests(mapbox_gl_platform_interface.MinMaxZoomPreference);
  dart.addTypeCaches(mapbox_gl_platform_interface.MinMaxZoomPreference);
  dart.setMethodSignature(mapbox_gl_platform_interface.MinMaxZoomPreference, () => ({
    __proto__: dart.getMethods(mapbox_gl_platform_interface.MinMaxZoomPreference.__proto__),
    toJson: dart.fnType(dart.dynamic, []),
    _equals: dart.fnType(core.bool, [dart.dynamic]),
    [$_equals]: dart.fnType(core.bool, [dart.dynamic])
  }));
  dart.setLibraryUri(mapbox_gl_platform_interface.MinMaxZoomPreference, I[0]);
  dart.setFieldSignature(mapbox_gl_platform_interface.MinMaxZoomPreference, () => ({
    __proto__: dart.getFields(mapbox_gl_platform_interface.MinMaxZoomPreference.__proto__),
    minZoom: dart.finalFieldType(dart.nullable(core.double)),
    maxZoom: dart.finalFieldType(dart.nullable(core.double))
  }));
  dart.defineExtensionMethods(mapbox_gl_platform_interface.MinMaxZoomPreference, ['_equals', 'toString']);
  dart.defineExtensionAccessors(mapbox_gl_platform_interface.MinMaxZoomPreference, ['hashCode']);
  dart.defineLazy(mapbox_gl_platform_interface.MinMaxZoomPreference, {
    /*mapbox_gl_platform_interface.MinMaxZoomPreference.unbounded*/get unbounded() {
      return C[37] || CT.C37;
    }
  }, false);
  mapbox_gl_platform_interface.translateFillOptions = function translateFillOptions(options, delta) {
    if (options.geometry != null) {
      let newGeometry = T.JSArrayOfListOfLatLng().of([]);
      for (let ring of dart.nullCheck(options.geometry)) {
        let newRing = T.JSArrayOfLatLng().of([]);
        for (let coords of ring) {
          newRing[$add](coords['+'](delta));
        }
        newGeometry[$add](newRing);
      }
      return new mapbox_gl_platform_interface.FillOptions.new({geometry: newGeometry});
    }
    return options;
  };
  mapbox_gl_platform_interface._offsetToJson = function _offsetToJson(offset) {
    if (offset == null) {
      return null;
    }
    return [offset.dx, offset.dy];
  };
  dart.trackLibraries("packages/mapbox_gl_platform_interface/mapbox_gl_platform_interface.dart", {
    "package:mapbox_gl_platform_interface/mapbox_gl_platform_interface.dart": mapbox_gl_platform_interface
  }, {
    "package:mapbox_gl_platform_interface/mapbox_gl_platform_interface.dart": ["src/callbacks.dart", "src/camera.dart", "src/circle.dart", "src/line.dart", "src/location.dart", "src/method_channel_mapbox_gl.dart", "src/symbol.dart", "src/fill.dart", "src/ui.dart", "src/mapbox_gl_platform_interface.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["src/callbacks.dart","src/camera.dart","src/circle.dart","src/line.dart","src/location.dart","src/mapbox_gl_platform_interface.dart","src/method_channel_mapbox_gl.dart","src/symbol.dart","src/fill.dart","src/ui.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/mapbox_gl_platform_interface/mapbox_gl_platform_interface.dart.lib.js"}');
  // Exports:
  return {
    mapbox_gl_platform_interface: mapbox_gl_platform_interface
  };
}));

//# sourceMappingURL=mapbox_gl_platform_interface.dart.lib.js.map
